/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  AuthHistory,
  AuthHistoryFromJSON,
  AuthHistoryToJSON,
  BlockUser,
  BlockUserFromJSON,
  BlockUserToJSON,
  CreateSshKeyData,
  CreateSshKeyDataFromJSON,
  CreateSshKeyDataToJSON,
  SetUserAddress,
  SetUserAddressFromJSON,
  SetUserAddressToJSON,
  SetUserEmail,
  SetUserEmailFromJSON,
  SetUserEmailToJSON,
  SetUserName,
  SetUserNameFromJSON,
  SetUserNameToJSON,
  SetUserPhone,
  SetUserPhoneFromJSON,
  SetUserPhoneToJSON,
  SshKey,
  SshKeyFromJSON,
  SshKeyToJSON,
  SshKeyData,
  SshKeyDataFromJSON,
  SshKeyDataToJSON,
  User,
  UserFromJSON,
  UserToJSON
} from "../models";

interface AddSshKeyRequest {
  createSshKeyData: CreateSshKeyData;
}

interface AuthHistoryRequest {
  id: string;
}

interface DeleteSshKeyRequest {
  id: string;
}

interface SshKeysRequest {
  userId: string;
}

interface UpdateSshKeyRequest {
  id: string;
  sshKeyData: SshKeyData;
}

interface UserRequest {
  id: string;
}

interface UserBlockRequest {
  id: string;
  blockUser: BlockUser;
}

interface UserSetAddressRequest {
  id: string;
  setUserAddress: SetUserAddress;
}

interface UserSetEmailRequest {
  id: string;
  setUserEmail: SetUserEmail;
}

interface UserSetNameRequest {
  id: string;
  setUserName: SetUserName;
}

interface UserSetPhoneRequest {
  id: string;
  setUserPhone: SetUserPhone;
}

interface UserUnblockRequest {
  id: string;
}

/**
 *
 */
export class AdminUserApi extends runtime.BaseAPI {
  /**
   */
  private async addSshKeyRaw(requestParameters: AddSshKeyRequest): Promise<runtime.ApiResponse<SshKey>> {
    this.addSshKeyValidation(requestParameters);
    const context = this.addSshKeyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SshKeyFromJSON(jsonValue));
  }

  /**
   */
  private addSshKeyValidation(requestParameters: AddSshKeyRequest) {
    if (requestParameters.createSshKeyData === null || requestParameters.createSshKeyData === undefined) {
      throw new runtime.RequiredError(
        "createSshKeyData",
        "Required parameter requestParameters.createSshKeyData was null or undefined when calling addSshKey."
      );
    }
  }

  /**
   */
  private addSshKeyContext(requestParameters: AddSshKeyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/ssh-keys`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateSshKeyDataToJSON(requestParameters.createSshKeyData)
    };
  }

  /**
   */
  addSshKey = async (createSshKeyData: CreateSshKeyData): Promise<SshKey> => {
    const response = await this.addSshKeyRaw({ createSshKeyData: createSshKeyData });
    return await response.value();
  };

  /**
   */
  private async authHistoryRaw(
    requestParameters: AuthHistoryRequest
  ): Promise<runtime.ApiResponse<Array<AuthHistory>>> {
    this.authHistoryValidation(requestParameters);
    const context = this.authHistoryContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AuthHistoryFromJSON));
  }

  /**
   */
  private authHistoryValidation(requestParameters: AuthHistoryRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling authHistory."
      );
    }
  }

  /**
   */
  private authHistoryContext(requestParameters: AuthHistoryRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/auth-history`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  authHistory = async (id: string): Promise<Array<AuthHistory>> => {
    const response = await this.authHistoryRaw({ id: id });
    return await response.value();
  };

  useAuthHistory(id: string, config?: ConfigInterface<Array<AuthHistory>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.authHistoryContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.authHistory(id!) : undefined, config);
  }

  /**
   */
  private async deleteSshKeyRaw(requestParameters: DeleteSshKeyRequest): Promise<runtime.ApiResponse<void>> {
    this.deleteSshKeyValidation(requestParameters);
    const context = this.deleteSshKeyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private deleteSshKeyValidation(requestParameters: DeleteSshKeyRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteSshKey."
      );
    }
  }

  /**
   */
  private deleteSshKeyContext(requestParameters: DeleteSshKeyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/ssh-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  deleteSshKey = async (id: string): Promise<void> => {
    await this.deleteSshKeyRaw({ id: id });
  };

  useDeleteSshKey(id: string, config?: ConfigInterface<void, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.deleteSshKeyContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.deleteSshKey(id!) : undefined, config);
  }

  /**
   */
  private async sshKeysRaw(requestParameters: SshKeysRequest): Promise<runtime.ApiResponse<Array<SshKey>>> {
    this.sshKeysValidation(requestParameters);
    const context = this.sshKeysContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(SshKeyFromJSON));
  }

  /**
   */
  private sshKeysValidation(requestParameters: SshKeysRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling sshKeys."
      );
    }
  }

  /**
   */
  private sshKeysContext(requestParameters: SshKeysRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/ssh-keys`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  sshKeys = async (userId: string): Promise<Array<SshKey>> => {
    const response = await this.sshKeysRaw({ userId: userId });
    return await response.value();
  };

  useSshKeys(userId: string, config?: ConfigInterface<Array<SshKey>, Error>) {
    let valid = true;

    if (userId === null || userId === undefined || Number.isNaN(userId)) {
      valid = false;
    }

    const context = this.sshKeysContext({ userId: userId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.sshKeys(userId!) : undefined, config);
  }

  /**
   */
  private async updateSshKeyRaw(requestParameters: UpdateSshKeyRequest): Promise<runtime.ApiResponse<SshKey>> {
    this.updateSshKeyValidation(requestParameters);
    const context = this.updateSshKeyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SshKeyFromJSON(jsonValue));
  }

  /**
   */
  private updateSshKeyValidation(requestParameters: UpdateSshKeyRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateSshKey."
      );
    }
    if (requestParameters.sshKeyData === null || requestParameters.sshKeyData === undefined) {
      throw new runtime.RequiredError(
        "sshKeyData",
        "Required parameter requestParameters.sshKeyData was null or undefined when calling updateSshKey."
      );
    }
  }

  /**
   */
  private updateSshKeyContext(requestParameters: UpdateSshKeyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/ssh-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: SshKeyDataToJSON(requestParameters.sshKeyData)
    };
  }

  /**
   */
  updateSshKey = async (id: string, sshKeyData: SshKeyData): Promise<SshKey> => {
    const response = await this.updateSshKeyRaw({ id: id, sshKeyData: sshKeyData });
    return await response.value();
  };

  /**
   */
  private async userRaw(requestParameters: UserRequest): Promise<runtime.ApiResponse<User>> {
    this.userValidation(requestParameters);
    const context = this.userContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => UserFromJSON(jsonValue));
  }

  /**
   */
  private userValidation(requestParameters: UserRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling user."
      );
    }
  }

  /**
   */
  private userContext(requestParameters: UserRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  user = async (id: string): Promise<User> => {
    const response = await this.userRaw({ id: id });
    return await response.value();
  };

  useUser(id: string, config?: ConfigInterface<User, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.userContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.user(id!) : undefined, config);
  }

  /**
   */
  private async userBlockRaw(requestParameters: UserBlockRequest): Promise<runtime.ApiResponse<void>> {
    this.userBlockValidation(requestParameters);
    const context = this.userBlockContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userBlockValidation(requestParameters: UserBlockRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userBlock."
      );
    }
    if (requestParameters.blockUser === null || requestParameters.blockUser === undefined) {
      throw new runtime.RequiredError(
        "blockUser",
        "Required parameter requestParameters.blockUser was null or undefined when calling userBlock."
      );
    }
  }

  /**
   */
  private userBlockContext(requestParameters: UserBlockRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/block`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: BlockUserToJSON(requestParameters.blockUser)
    };
  }

  /**
   */
  userBlock = async (id: string, blockUser: BlockUser): Promise<void> => {
    await this.userBlockRaw({ id: id, blockUser: blockUser });
  };

  /**
   */
  private async userSetAddressRaw(requestParameters: UserSetAddressRequest): Promise<runtime.ApiResponse<void>> {
    this.userSetAddressValidation(requestParameters);
    const context = this.userSetAddressContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userSetAddressValidation(requestParameters: UserSetAddressRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userSetAddress."
      );
    }
    if (requestParameters.setUserAddress === null || requestParameters.setUserAddress === undefined) {
      throw new runtime.RequiredError(
        "setUserAddress",
        "Required parameter requestParameters.setUserAddress was null or undefined when calling userSetAddress."
      );
    }
  }

  /**
   */
  private userSetAddressContext(requestParameters: UserSetAddressRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/address`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SetUserAddressToJSON(requestParameters.setUserAddress)
    };
  }

  /**
   */
  userSetAddress = async (id: string, setUserAddress: SetUserAddress): Promise<void> => {
    await this.userSetAddressRaw({ id: id, setUserAddress: setUserAddress });
  };

  /**
   */
  private async userSetEmailRaw(requestParameters: UserSetEmailRequest): Promise<runtime.ApiResponse<void>> {
    this.userSetEmailValidation(requestParameters);
    const context = this.userSetEmailContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userSetEmailValidation(requestParameters: UserSetEmailRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userSetEmail."
      );
    }
    if (requestParameters.setUserEmail === null || requestParameters.setUserEmail === undefined) {
      throw new runtime.RequiredError(
        "setUserEmail",
        "Required parameter requestParameters.setUserEmail was null or undefined when calling userSetEmail."
      );
    }
  }

  /**
   */
  private userSetEmailContext(requestParameters: UserSetEmailRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/email`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SetUserEmailToJSON(requestParameters.setUserEmail)
    };
  }

  /**
   */
  userSetEmail = async (id: string, setUserEmail: SetUserEmail): Promise<void> => {
    await this.userSetEmailRaw({ id: id, setUserEmail: setUserEmail });
  };

  /**
   */
  private async userSetNameRaw(requestParameters: UserSetNameRequest): Promise<runtime.ApiResponse<void>> {
    this.userSetNameValidation(requestParameters);
    const context = this.userSetNameContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userSetNameValidation(requestParameters: UserSetNameRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userSetName."
      );
    }
    if (requestParameters.setUserName === null || requestParameters.setUserName === undefined) {
      throw new runtime.RequiredError(
        "setUserName",
        "Required parameter requestParameters.setUserName was null or undefined when calling userSetName."
      );
    }
  }

  /**
   */
  private userSetNameContext(requestParameters: UserSetNameRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SetUserNameToJSON(requestParameters.setUserName)
    };
  }

  /**
   */
  userSetName = async (id: string, setUserName: SetUserName): Promise<void> => {
    await this.userSetNameRaw({ id: id, setUserName: setUserName });
  };

  /**
   */
  private async userSetPhoneRaw(requestParameters: UserSetPhoneRequest): Promise<runtime.ApiResponse<void>> {
    this.userSetPhoneValidation(requestParameters);
    const context = this.userSetPhoneContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userSetPhoneValidation(requestParameters: UserSetPhoneRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userSetPhone."
      );
    }
    if (requestParameters.setUserPhone === null || requestParameters.setUserPhone === undefined) {
      throw new runtime.RequiredError(
        "setUserPhone",
        "Required parameter requestParameters.setUserPhone was null or undefined when calling userSetPhone."
      );
    }
  }

  /**
   */
  private userSetPhoneContext(requestParameters: UserSetPhoneRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/phone`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SetUserPhoneToJSON(requestParameters.setUserPhone)
    };
  }

  /**
   */
  userSetPhone = async (id: string, setUserPhone: SetUserPhone): Promise<void> => {
    await this.userSetPhoneRaw({ id: id, setUserPhone: setUserPhone });
  };

  /**
   */
  private async userUnblockRaw(requestParameters: UserUnblockRequest): Promise<runtime.ApiResponse<void>> {
    this.userUnblockValidation(requestParameters);
    const context = this.userUnblockContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userUnblockValidation(requestParameters: UserUnblockRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userUnblock."
      );
    }
  }

  /**
   */
  private userUnblockContext(requestParameters: UserUnblockRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/unblock`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  userUnblock = async (id: string): Promise<void> => {
    await this.userUnblockRaw({ id: id });
  };

  /**
   */
  private async usersRaw(): Promise<runtime.ApiResponse<Array<User>>> {
    this.usersValidation();
    const context = this.usersContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(UserFromJSON));
  }

  /**
   */
  private usersValidation() {}

  /**
   */
  private usersContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  users = async (): Promise<Array<User>> => {
    const response = await this.usersRaw();
    return await response.value();
  };

  useUsers(config?: ConfigInterface<Array<User>, Error>) {
    let valid = true;

    const context = this.usersContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.users() : undefined, config);
  }
}

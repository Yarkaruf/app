/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import { Question, QuestionFromJSON, QuestionToJSON } from "../models";

interface SendQuestionRequest {
  question: Question;
}

/**
 *
 */
export class SupportApi extends runtime.BaseAPI {
  /**
   */
  private async sendQuestionRaw(requestParameters: SendQuestionRequest): Promise<runtime.ApiResponse<void>> {
    this.sendQuestionValidation(requestParameters);
    const context = this.sendQuestionContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private sendQuestionValidation(requestParameters: SendQuestionRequest) {
    if (requestParameters.question === null || requestParameters.question === undefined) {
      throw new runtime.RequiredError(
        "question",
        "Required parameter requestParameters.question was null or undefined when calling sendQuestion."
      );
    }
  }

  /**
   */
  private sendQuestionContext(requestParameters: SendQuestionRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/support/question`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: QuestionToJSON(requestParameters.question)
    };
  }

  /**
   */
  sendQuestion = async (question: Question): Promise<void> => {
    await this.sendQuestionRaw({ question: question });
  };
}

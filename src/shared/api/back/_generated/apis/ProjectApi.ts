/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  Project,
  ProjectFromJSON,
  ProjectToJSON,
  ProjectData,
  ProjectDataFromJSON,
  ProjectDataToJSON,
  ProjectDeleteData,
  ProjectDeleteDataFromJSON,
  ProjectDeleteDataToJSON,
  ProjectId,
  ProjectIdFromJSON,
  ProjectIdToJSON
} from "../models";

interface CreateProjectRequest {
  projectData: ProjectData;
}

interface DeleteProjectRequest {
  id: string;
  projectDeleteData: ProjectDeleteData;
}

interface ProjectRequest {
  id: string;
}

interface UpdateProjectRequest {
  id: string;
  projectData: ProjectData;
}

/**
 *
 */
export class ProjectApi extends runtime.BaseAPI {
  /**
   */
  private async createProjectRaw(requestParameters: CreateProjectRequest): Promise<runtime.ApiResponse<ProjectId>> {
    this.createProjectValidation(requestParameters);
    const context = this.createProjectContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => ProjectIdFromJSON(jsonValue));
  }

  /**
   */
  private createProjectValidation(requestParameters: CreateProjectRequest) {
    if (requestParameters.projectData === null || requestParameters.projectData === undefined) {
      throw new runtime.RequiredError(
        "projectData",
        "Required parameter requestParameters.projectData was null or undefined when calling createProject."
      );
    }
  }

  /**
   */
  private createProjectContext(requestParameters: CreateProjectRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/project`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ProjectDataToJSON(requestParameters.projectData)
    };
  }

  /**
   */
  createProject = async (projectData: ProjectData): Promise<ProjectId> => {
    const response = await this.createProjectRaw({ projectData: projectData });
    return await response.value();
  };

  /**
   */
  private async deleteProjectRaw(requestParameters: DeleteProjectRequest): Promise<runtime.ApiResponse<void>> {
    this.deleteProjectValidation(requestParameters);
    const context = this.deleteProjectContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private deleteProjectValidation(requestParameters: DeleteProjectRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteProject."
      );
    }
    if (requestParameters.projectDeleteData === null || requestParameters.projectDeleteData === undefined) {
      throw new runtime.RequiredError(
        "projectDeleteData",
        "Required parameter requestParameters.projectDeleteData was null or undefined when calling deleteProject."
      );
    }
  }

  /**
   */
  private deleteProjectContext(requestParameters: DeleteProjectRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
      body: ProjectDeleteDataToJSON(requestParameters.projectDeleteData)
    };
  }

  /**
   */
  deleteProject = async (id: string, projectDeleteData: ProjectDeleteData): Promise<void> => {
    await this.deleteProjectRaw({ id: id, projectDeleteData: projectDeleteData });
  };

  useDeleteProject(id: string, projectDeleteData: ProjectDeleteData, config?: ConfigInterface<void, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    if (projectDeleteData === null || projectDeleteData === undefined || Number.isNaN(projectDeleteData)) {
      valid = false;
    }

    const context = this.deleteProjectContext({ id: id!, projectDeleteData: projectDeleteData! });
    const { headers, ...swrKey } = context;
    return useSWR(
      JSON.stringify(swrKey),
      valid ? () => this.deleteProject(id!, projectDeleteData!) : undefined,
      config
    );
  }

  /**
   */
  private async projectRaw(requestParameters: ProjectRequest): Promise<runtime.ApiResponse<Project>> {
    this.projectValidation(requestParameters);
    const context = this.projectContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => ProjectFromJSON(jsonValue));
  }

  /**
   */
  private projectValidation(requestParameters: ProjectRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling project."
      );
    }
  }

  /**
   */
  private projectContext(requestParameters: ProjectRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  project = async (id: string): Promise<Project> => {
    const response = await this.projectRaw({ id: id });
    return await response.value();
  };

  useProject(id: string, config?: ConfigInterface<Project, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.projectContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.project(id!) : undefined, config);
  }

  /**
   */
  private async projectListRaw(): Promise<runtime.ApiResponse<Array<Project>>> {
    this.projectListValidation();
    const context = this.projectListContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(ProjectFromJSON));
  }

  /**
   */
  private projectListValidation() {}

  /**
   */
  private projectListContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/project`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  projectList = async (): Promise<Array<Project>> => {
    const response = await this.projectListRaw();
    return await response.value();
  };

  useProjectList(config?: ConfigInterface<Array<Project>, Error>) {
    let valid = true;

    const context = this.projectListContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.projectList() : undefined, config);
  }

  /**
   */
  private async updateProjectRaw(requestParameters: UpdateProjectRequest): Promise<runtime.ApiResponse<void>> {
    this.updateProjectValidation(requestParameters);
    const context = this.updateProjectContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private updateProjectValidation(requestParameters: UpdateProjectRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateProject."
      );
    }
    if (requestParameters.projectData === null || requestParameters.projectData === undefined) {
      throw new runtime.RequiredError(
        "projectData",
        "Required parameter requestParameters.projectData was null or undefined when calling updateProject."
      );
    }
  }

  /**
   */
  private updateProjectContext(requestParameters: UpdateProjectRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ProjectDataToJSON(requestParameters.projectData)
    };
  }

  /**
   */
  updateProject = async (id: string, projectData: ProjectData): Promise<void> => {
    await this.updateProjectRaw({ id: id, projectData: projectData });
  };
}

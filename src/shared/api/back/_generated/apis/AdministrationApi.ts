/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  Account,
  AccountFromJSON,
  AccountToJSON,
  AdministrationHistory,
  AdministrationHistoryFromJSON,
  AdministrationHistoryToJSON,
  AdministrationTariff,
  AdministrationTariffFromJSON,
  AdministrationTariffToJSON,
  BillId,
  BillIdFromJSON,
  BillIdToJSON
} from "../models";

interface BuyRequest {
  tariffId: string;
}

/**
 *
 */
export class AdministrationApi extends runtime.BaseAPI {
  /**
   */
  private async accountRaw(): Promise<runtime.ApiResponse<Account>> {
    this.accountValidation();
    const context = this.accountContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => AccountFromJSON(jsonValue));
  }

  /**
   */
  private accountValidation() {}

  /**
   */
  private accountContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/administration/account`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  account = async (): Promise<Account> => {
    const response = await this.accountRaw();
    return await response.value();
  };

  useAccount(config?: ConfigInterface<Account, Error>) {
    let valid = true;

    const context = this.accountContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.account() : undefined, config);
  }

  /**
   */
  private async buyRaw(requestParameters: BuyRequest): Promise<runtime.ApiResponse<BillId>> {
    this.buyValidation(requestParameters);
    const context = this.buyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => BillIdFromJSON(jsonValue));
  }

  /**
   */
  private buyValidation(requestParameters: BuyRequest) {
    if (requestParameters.tariffId === null || requestParameters.tariffId === undefined) {
      throw new runtime.RequiredError(
        "tariffId",
        "Required parameter requestParameters.tariffId was null or undefined when calling buy."
      );
    }
  }

  /**
   */
  private buyContext(requestParameters: BuyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/administration/tariff/{tariffId}/buy`.replace(
        `{${"tariffId"}}`,
        encodeURIComponent(String(requestParameters.tariffId))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  buy = async (tariffId: string): Promise<BillId> => {
    const response = await this.buyRaw({ tariffId: tariffId });
    return await response.value();
  };

  /**
   */
  private async historyRaw(): Promise<runtime.ApiResponse<Array<AdministrationHistory>>> {
    this.historyValidation();
    const context = this.historyContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AdministrationHistoryFromJSON));
  }

  /**
   */
  private historyValidation() {}

  /**
   */
  private historyContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/administration/history`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  history = async (): Promise<Array<AdministrationHistory>> => {
    const response = await this.historyRaw();
    return await response.value();
  };

  useHistory(config?: ConfigInterface<Array<AdministrationHistory>, Error>) {
    let valid = true;

    const context = this.historyContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.history() : undefined, config);
  }

  /**
   */
  private async tariffsRaw(): Promise<runtime.ApiResponse<Array<AdministrationTariff>>> {
    this.tariffsValidation();
    const context = this.tariffsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AdministrationTariffFromJSON));
  }

  /**
   */
  private tariffsValidation() {}

  /**
   */
  private tariffsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/administration/tariff`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tariffs = async (): Promise<Array<AdministrationTariff>> => {
    const response = await this.tariffsRaw();
    return await response.value();
  };

  useTariffs(config?: ConfigInterface<Array<AdministrationTariff>, Error>) {
    let valid = true;

    const context = this.tariffsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.tariffs() : undefined, config);
  }
}

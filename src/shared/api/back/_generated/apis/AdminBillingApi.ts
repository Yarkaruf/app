/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  AdminCheckoutSessionCreateDTO,
  AdminCheckoutSessionCreateDTOFromJSON,
  AdminCheckoutSessionCreateDTOToJSON,
  BalanceDTO,
  BalanceDTOFromJSON,
  BalanceDTOToJSON,
  BalanceTransactionDTO,
  BalanceTransactionDTOFromJSON,
  BalanceTransactionDTOToJSON,
  CheckoutSession,
  CheckoutSessionFromJSON,
  CheckoutSessionToJSON,
  ChoosePaymentSystem,
  ChoosePaymentSystemFromJSON,
  ChoosePaymentSystemToJSON,
  Discount,
  DiscountFromJSON,
  DiscountToJSON,
  Invoice,
  InvoiceFromJSON,
  InvoiceToJSON,
  ManualDepositRequest,
  ManualDepositRequestFromJSON,
  ManualDepositRequestToJSON,
  ManualWithdrawRequest,
  ManualWithdrawRequestFromJSON,
  ManualWithdrawRequestToJSON,
  Payment,
  PaymentFromJSON,
  PaymentToJSON,
  PaymentAttempt,
  PaymentAttemptFromJSON,
  PaymentAttemptToJSON,
  Subscription,
  SubscriptionFromJSON,
  SubscriptionToJSON,
  SubscriptionInvoiceId,
  SubscriptionInvoiceIdFromJSON,
  SubscriptionInvoiceIdToJSON,
  SubscriptionSwitchToMonthly,
  SubscriptionSwitchToMonthlyFromJSON,
  SubscriptionSwitchToMonthlyToJSON
} from "../models";

interface BalanceRequest {
  userId: string;
}

interface CancelCheckoutSessionRequest {
  id: string;
}

interface CheckoutSessionRequest {
  id: string;
}

interface ChoosePaymentSystemRequest {
  id: string;
  choosePaymentSystem: ChoosePaymentSystem;
}

interface ConfirmCheckoutSessionRequest {
  id: string;
}

interface CorePaymentParamsRequest {
  id: string;
}

interface CreateCheckoutSessionRequest {
  adminCheckoutSessionCreateDTO: AdminCheckoutSessionCreateDTO;
}

interface InvoiceRequest {
  id: string;
}

interface InvoiceCancelRequest {
  id: string;
}

interface InvoicesRequest {
  userId: string;
}

interface ManualDepositOperationRequest {
  userId: string;
  manualDepositRequest: ManualDepositRequest;
}

interface ManualWithdrawOperationRequest {
  userId: string;
  manualWithdrawRequest: ManualWithdrawRequest;
}

interface SubscriptionRequest {
  id: string;
}

interface SubscriptionProlongRequest {
  id: string;
  subscriptionSwitchToMonthly: SubscriptionSwitchToMonthly;
}

interface SubscriptionSwitchToHourlyRequest {
  id: string;
}

interface SubscriptionSwitchToMonthlyRequest {
  id: string;
  subscriptionSwitchToMonthly: SubscriptionSwitchToMonthly;
}

interface SubscriptionsRequest {
  userId: string;
}

interface TransactionsRequest {
  userId: string;
}

/**
 *
 */
export class AdminBillingApi extends runtime.BaseAPI {
  /**
   */
  private async balanceRaw(requestParameters: BalanceRequest): Promise<runtime.ApiResponse<BalanceDTO>> {
    this.balanceValidation(requestParameters);
    const context = this.balanceContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => BalanceDTOFromJSON(jsonValue));
  }

  /**
   */
  private balanceValidation(requestParameters: BalanceRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling balance."
      );
    }
  }

  /**
   */
  private balanceContext(requestParameters: BalanceRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/balance/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(requestParameters.userId))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  balance = async (userId: string): Promise<BalanceDTO> => {
    const response = await this.balanceRaw({ userId: userId });
    return await response.value();
  };

  useBalance(userId: string, config?: ConfigInterface<BalanceDTO, Error>) {
    let valid = true;

    if (userId === null || userId === undefined || Number.isNaN(userId)) {
      valid = false;
    }

    const context = this.balanceContext({ userId: userId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.balance(userId!) : undefined, config);
  }

  /**
   */
  private async balanceListRaw(): Promise<runtime.ApiResponse<Array<BalanceDTO>>> {
    this.balanceListValidation();
    const context = this.balanceListContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(BalanceDTOFromJSON));
  }

  /**
   */
  private balanceListValidation() {}

  /**
   */
  private balanceListContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/balance`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  balanceList = async (): Promise<Array<BalanceDTO>> => {
    const response = await this.balanceListRaw();
    return await response.value();
  };

  useBalanceList(config?: ConfigInterface<Array<BalanceDTO>, Error>) {
    let valid = true;

    const context = this.balanceListContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.balanceList() : undefined, config);
  }

  /**
   */
  private async cancelCheckoutSessionRaw(
    requestParameters: CancelCheckoutSessionRequest
  ): Promise<runtime.ApiResponse<CheckoutSession>> {
    this.cancelCheckoutSessionValidation(requestParameters);
    const context = this.cancelCheckoutSessionContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => CheckoutSessionFromJSON(jsonValue));
  }

  /**
   */
  private cancelCheckoutSessionValidation(requestParameters: CancelCheckoutSessionRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling cancelCheckoutSession."
      );
    }
  }

  /**
   */
  private cancelCheckoutSessionContext(requestParameters: CancelCheckoutSessionRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/checkout/{id}/cancel`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  cancelCheckoutSession = async (id: string): Promise<CheckoutSession> => {
    const response = await this.cancelCheckoutSessionRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async checkoutSessionRaw(
    requestParameters: CheckoutSessionRequest
  ): Promise<runtime.ApiResponse<CheckoutSession>> {
    this.checkoutSessionValidation(requestParameters);
    const context = this.checkoutSessionContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => CheckoutSessionFromJSON(jsonValue));
  }

  /**
   */
  private checkoutSessionValidation(requestParameters: CheckoutSessionRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling checkoutSession."
      );
    }
  }

  /**
   */
  private checkoutSessionContext(requestParameters: CheckoutSessionRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/checkout/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  checkoutSession = async (id: string): Promise<CheckoutSession> => {
    const response = await this.checkoutSessionRaw({ id: id });
    return await response.value();
  };

  useCheckoutSession(id: string, config?: ConfigInterface<CheckoutSession, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.checkoutSessionContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.checkoutSession(id!) : undefined, config);
  }

  /**
   */
  private async choosePaymentSystemRaw(
    requestParameters: ChoosePaymentSystemRequest
  ): Promise<runtime.ApiResponse<PaymentAttempt>> {
    this.choosePaymentSystemValidation(requestParameters);
    const context = this.choosePaymentSystemContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => PaymentAttemptFromJSON(jsonValue));
  }

  /**
   */
  private choosePaymentSystemValidation(requestParameters: ChoosePaymentSystemRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling choosePaymentSystem."
      );
    }
    if (requestParameters.choosePaymentSystem === null || requestParameters.choosePaymentSystem === undefined) {
      throw new runtime.RequiredError(
        "choosePaymentSystem",
        "Required parameter requestParameters.choosePaymentSystem was null or undefined when calling choosePaymentSystem."
      );
    }
  }

  /**
   */
  private choosePaymentSystemContext(requestParameters: ChoosePaymentSystemRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/payment/core/{id}/choose-payment-system`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ChoosePaymentSystemToJSON(requestParameters.choosePaymentSystem)
    };
  }

  /**
   */
  choosePaymentSystem = async (id: string, choosePaymentSystem: ChoosePaymentSystem): Promise<PaymentAttempt> => {
    const response = await this.choosePaymentSystemRaw({ id: id, choosePaymentSystem: choosePaymentSystem });
    return await response.value();
  };

  /**
   */
  private async confirmCheckoutSessionRaw(
    requestParameters: ConfirmCheckoutSessionRequest
  ): Promise<runtime.ApiResponse<CheckoutSession>> {
    this.confirmCheckoutSessionValidation(requestParameters);
    const context = this.confirmCheckoutSessionContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => CheckoutSessionFromJSON(jsonValue));
  }

  /**
   */
  private confirmCheckoutSessionValidation(requestParameters: ConfirmCheckoutSessionRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling confirmCheckoutSession."
      );
    }
  }

  /**
   */
  private confirmCheckoutSessionContext(requestParameters: ConfirmCheckoutSessionRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/checkout/{id}/confirm`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  confirmCheckoutSession = async (id: string): Promise<CheckoutSession> => {
    const response = await this.confirmCheckoutSessionRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async corePaymentParamsRaw(
    requestParameters: CorePaymentParamsRequest
  ): Promise<runtime.ApiResponse<Payment>> {
    this.corePaymentParamsValidation(requestParameters);
    const context = this.corePaymentParamsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => PaymentFromJSON(jsonValue));
  }

  /**
   */
  private corePaymentParamsValidation(requestParameters: CorePaymentParamsRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling corePaymentParams."
      );
    }
  }

  /**
   */
  private corePaymentParamsContext(requestParameters: CorePaymentParamsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/payment/core/{id}/payment-params`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  corePaymentParams = async (id: string): Promise<Payment> => {
    const response = await this.corePaymentParamsRaw({ id: id });
    return await response.value();
  };

  useCorePaymentParams(id: string, config?: ConfigInterface<Payment, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.corePaymentParamsContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.corePaymentParams(id!) : undefined, config);
  }

  /**
   */
  private async createCheckoutSessionRaw(
    requestParameters: CreateCheckoutSessionRequest
  ): Promise<runtime.ApiResponse<CheckoutSession>> {
    this.createCheckoutSessionValidation(requestParameters);
    const context = this.createCheckoutSessionContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => CheckoutSessionFromJSON(jsonValue));
  }

  /**
   */
  private createCheckoutSessionValidation(requestParameters: CreateCheckoutSessionRequest) {
    if (
      requestParameters.adminCheckoutSessionCreateDTO === null ||
      requestParameters.adminCheckoutSessionCreateDTO === undefined
    ) {
      throw new runtime.RequiredError(
        "adminCheckoutSessionCreateDTO",
        "Required parameter requestParameters.adminCheckoutSessionCreateDTO was null or undefined when calling createCheckoutSession."
      );
    }
  }

  /**
   */
  private createCheckoutSessionContext(requestParameters: CreateCheckoutSessionRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/checkout`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: AdminCheckoutSessionCreateDTOToJSON(requestParameters.adminCheckoutSessionCreateDTO)
    };
  }

  /**
   */
  createCheckoutSession = async (
    adminCheckoutSessionCreateDTO: AdminCheckoutSessionCreateDTO
  ): Promise<CheckoutSession> => {
    const response = await this.createCheckoutSessionRaw({
      adminCheckoutSessionCreateDTO: adminCheckoutSessionCreateDTO
    });
    return await response.value();
  };

  /**
   */
  private async invoiceRaw(requestParameters: InvoiceRequest): Promise<runtime.ApiResponse<Invoice>> {
    this.invoiceValidation(requestParameters);
    const context = this.invoiceContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => InvoiceFromJSON(jsonValue));
  }

  /**
   */
  private invoiceValidation(requestParameters: InvoiceRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling invoice."
      );
    }
  }

  /**
   */
  private invoiceContext(requestParameters: InvoiceRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/invoice/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  invoice = async (id: string): Promise<Invoice> => {
    const response = await this.invoiceRaw({ id: id });
    return await response.value();
  };

  useInvoice(id: string, config?: ConfigInterface<Invoice, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.invoiceContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.invoice(id!) : undefined, config);
  }

  /**
   */
  private async invoiceCancelRaw(requestParameters: InvoiceCancelRequest): Promise<runtime.ApiResponse<void>> {
    this.invoiceCancelValidation(requestParameters);
    const context = this.invoiceCancelContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private invoiceCancelValidation(requestParameters: InvoiceCancelRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling invoiceCancel."
      );
    }
  }

  /**
   */
  private invoiceCancelContext(requestParameters: InvoiceCancelRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/invoice/{id}/cancel`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  invoiceCancel = async (id: string): Promise<void> => {
    await this.invoiceCancelRaw({ id: id });
  };

  useInvoiceCancel(id: string, config?: ConfigInterface<void, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.invoiceCancelContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.invoiceCancel(id!) : undefined, config);
  }

  /**
   */
  private async invoicesRaw(requestParameters: InvoicesRequest): Promise<runtime.ApiResponse<Array<Invoice>>> {
    this.invoicesValidation(requestParameters);
    const context = this.invoicesContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(InvoiceFromJSON));
  }

  /**
   */
  private invoicesValidation(requestParameters: InvoicesRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling invoices."
      );
    }
  }

  /**
   */
  private invoicesContext(requestParameters: InvoicesRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/invoice`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  invoices = async (userId: string): Promise<Array<Invoice>> => {
    const response = await this.invoicesRaw({ userId: userId });
    return await response.value();
  };

  useInvoices(userId: string, config?: ConfigInterface<Array<Invoice>, Error>) {
    let valid = true;

    if (userId === null || userId === undefined || Number.isNaN(userId)) {
      valid = false;
    }

    const context = this.invoicesContext({ userId: userId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.invoices(userId!) : undefined, config);
  }

  /**
   */
  private async manualDepositRaw(requestParameters: ManualDepositOperationRequest): Promise<runtime.ApiResponse<void>> {
    this.manualDepositValidation(requestParameters);
    const context = this.manualDepositContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private manualDepositValidation(requestParameters: ManualDepositOperationRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling manualDeposit."
      );
    }
    if (requestParameters.manualDepositRequest === null || requestParameters.manualDepositRequest === undefined) {
      throw new runtime.RequiredError(
        "manualDepositRequest",
        "Required parameter requestParameters.manualDepositRequest was null or undefined when calling manualDeposit."
      );
    }
  }

  /**
   */
  private manualDepositContext(requestParameters: ManualDepositOperationRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/balance/{userId}/manual-deposit`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ManualDepositRequestToJSON(requestParameters.manualDepositRequest)
    };
  }

  /**
   */
  manualDeposit = async (userId: string, manualDepositRequest: ManualDepositRequest): Promise<void> => {
    await this.manualDepositRaw({ userId: userId, manualDepositRequest: manualDepositRequest });
  };

  /**
   */
  private async manualWithdrawRaw(
    requestParameters: ManualWithdrawOperationRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.manualWithdrawValidation(requestParameters);
    const context = this.manualWithdrawContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private manualWithdrawValidation(requestParameters: ManualWithdrawOperationRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling manualWithdraw."
      );
    }
    if (requestParameters.manualWithdrawRequest === null || requestParameters.manualWithdrawRequest === undefined) {
      throw new runtime.RequiredError(
        "manualWithdrawRequest",
        "Required parameter requestParameters.manualWithdrawRequest was null or undefined when calling manualWithdraw."
      );
    }
  }

  /**
   */
  private manualWithdrawContext(requestParameters: ManualWithdrawOperationRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/balance/{userId}/manual-withdraw`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ManualWithdrawRequestToJSON(requestParameters.manualWithdrawRequest)
    };
  }

  /**
   */
  manualWithdraw = async (userId: string, manualWithdrawRequest: ManualWithdrawRequest): Promise<void> => {
    await this.manualWithdrawRaw({ userId: userId, manualWithdrawRequest: manualWithdrawRequest });
  };

  /**
   */
  private async subscriptionRaw(requestParameters: SubscriptionRequest): Promise<runtime.ApiResponse<Subscription>> {
    this.subscriptionValidation(requestParameters);
    const context = this.subscriptionContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SubscriptionFromJSON(jsonValue));
  }

  /**
   */
  private subscriptionValidation(requestParameters: SubscriptionRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling subscription."
      );
    }
  }

  /**
   */
  private subscriptionContext(requestParameters: SubscriptionRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/subscription/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  subscription = async (id: string): Promise<Subscription> => {
    const response = await this.subscriptionRaw({ id: id });
    return await response.value();
  };

  useSubscription(id: string, config?: ConfigInterface<Subscription, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.subscriptionContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.subscription(id!) : undefined, config);
  }

  /**
   */
  private async subscriptionDiscountsRaw(): Promise<runtime.ApiResponse<Array<Discount>>> {
    this.subscriptionDiscountsValidation();
    const context = this.subscriptionDiscountsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(DiscountFromJSON));
  }

  /**
   */
  private subscriptionDiscountsValidation() {}

  /**
   */
  private subscriptionDiscountsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/subscription/discounts`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  subscriptionDiscounts = async (): Promise<Array<Discount>> => {
    const response = await this.subscriptionDiscountsRaw();
    return await response.value();
  };

  useSubscriptionDiscounts(config?: ConfigInterface<Array<Discount>, Error>) {
    let valid = true;

    const context = this.subscriptionDiscountsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.subscriptionDiscounts() : undefined, config);
  }

  /**
   */
  private async subscriptionProlongRaw(
    requestParameters: SubscriptionProlongRequest
  ): Promise<runtime.ApiResponse<SubscriptionInvoiceId>> {
    this.subscriptionProlongValidation(requestParameters);
    const context = this.subscriptionProlongContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SubscriptionInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private subscriptionProlongValidation(requestParameters: SubscriptionProlongRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling subscriptionProlong."
      );
    }
    if (
      requestParameters.subscriptionSwitchToMonthly === null ||
      requestParameters.subscriptionSwitchToMonthly === undefined
    ) {
      throw new runtime.RequiredError(
        "subscriptionSwitchToMonthly",
        "Required parameter requestParameters.subscriptionSwitchToMonthly was null or undefined when calling subscriptionProlong."
      );
    }
  }

  /**
   */
  private subscriptionProlongContext(requestParameters: SubscriptionProlongRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/subscription/{id}/prolong`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SubscriptionSwitchToMonthlyToJSON(requestParameters.subscriptionSwitchToMonthly)
    };
  }

  /**
   */
  subscriptionProlong = async (
    id: string,
    subscriptionSwitchToMonthly: SubscriptionSwitchToMonthly
  ): Promise<SubscriptionInvoiceId> => {
    const response = await this.subscriptionProlongRaw({
      id: id,
      subscriptionSwitchToMonthly: subscriptionSwitchToMonthly
    });
    return await response.value();
  };

  /**
   */
  private async subscriptionSwitchToHourlyRaw(
    requestParameters: SubscriptionSwitchToHourlyRequest
  ): Promise<runtime.ApiResponse<SubscriptionInvoiceId>> {
    this.subscriptionSwitchToHourlyValidation(requestParameters);
    const context = this.subscriptionSwitchToHourlyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SubscriptionInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private subscriptionSwitchToHourlyValidation(requestParameters: SubscriptionSwitchToHourlyRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling subscriptionSwitchToHourly."
      );
    }
  }

  /**
   */
  private subscriptionSwitchToHourlyContext(requestParameters: SubscriptionSwitchToHourlyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/subscription/{id}/switch-to-hourly`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  subscriptionSwitchToHourly = async (id: string): Promise<SubscriptionInvoiceId> => {
    const response = await this.subscriptionSwitchToHourlyRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async subscriptionSwitchToMonthlyRaw(
    requestParameters: SubscriptionSwitchToMonthlyRequest
  ): Promise<runtime.ApiResponse<SubscriptionInvoiceId>> {
    this.subscriptionSwitchToMonthlyValidation(requestParameters);
    const context = this.subscriptionSwitchToMonthlyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SubscriptionInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private subscriptionSwitchToMonthlyValidation(requestParameters: SubscriptionSwitchToMonthlyRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling subscriptionSwitchToMonthly."
      );
    }
    if (
      requestParameters.subscriptionSwitchToMonthly === null ||
      requestParameters.subscriptionSwitchToMonthly === undefined
    ) {
      throw new runtime.RequiredError(
        "subscriptionSwitchToMonthly",
        "Required parameter requestParameters.subscriptionSwitchToMonthly was null or undefined when calling subscriptionSwitchToMonthly."
      );
    }
  }

  /**
   */
  private subscriptionSwitchToMonthlyContext(
    requestParameters: SubscriptionSwitchToMonthlyRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/subscription/{id}/switch-to-monthly`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SubscriptionSwitchToMonthlyToJSON(requestParameters.subscriptionSwitchToMonthly)
    };
  }

  /**
   */
  subscriptionSwitchToMonthly = async (
    id: string,
    subscriptionSwitchToMonthly: SubscriptionSwitchToMonthly
  ): Promise<SubscriptionInvoiceId> => {
    const response = await this.subscriptionSwitchToMonthlyRaw({
      id: id,
      subscriptionSwitchToMonthly: subscriptionSwitchToMonthly
    });
    return await response.value();
  };

  /**
   */
  private async subscriptionsRaw(
    requestParameters: SubscriptionsRequest
  ): Promise<runtime.ApiResponse<Array<Subscription>>> {
    this.subscriptionsValidation(requestParameters);
    const context = this.subscriptionsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(SubscriptionFromJSON));
  }

  /**
   */
  private subscriptionsValidation(requestParameters: SubscriptionsRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling subscriptions."
      );
    }
  }

  /**
   */
  private subscriptionsContext(requestParameters: SubscriptionsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/subscription`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  subscriptions = async (userId: string): Promise<Array<Subscription>> => {
    const response = await this.subscriptionsRaw({ userId: userId });
    return await response.value();
  };

  useSubscriptions(userId: string, config?: ConfigInterface<Array<Subscription>, Error>) {
    let valid = true;

    if (userId === null || userId === undefined || Number.isNaN(userId)) {
      valid = false;
    }

    const context = this.subscriptionsContext({ userId: userId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.subscriptions(userId!) : undefined, config);
  }

  /**
   */
  private async transactionsRaw(
    requestParameters: TransactionsRequest
  ): Promise<runtime.ApiResponse<Array<BalanceTransactionDTO>>> {
    this.transactionsValidation(requestParameters);
    const context = this.transactionsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(BalanceTransactionDTOFromJSON));
  }

  /**
   */
  private transactionsValidation(requestParameters: TransactionsRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling transactions."
      );
    }
  }

  /**
   */
  private transactionsContext(requestParameters: TransactionsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/billing/balance/{userId}/transactions`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(requestParameters.userId))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  transactions = async (userId: string): Promise<Array<BalanceTransactionDTO>> => {
    const response = await this.transactionsRaw({ userId: userId });
    return await response.value();
  };

  useTransactions(userId: string, config?: ConfigInterface<Array<BalanceTransactionDTO>, Error>) {
    let valid = true;

    if (userId === null || userId === undefined || Number.isNaN(userId)) {
      valid = false;
    }

    const context = this.transactionsContext({ userId: userId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.transactions(userId!) : undefined, config);
  }
}

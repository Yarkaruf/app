/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  AuthHistory,
  AuthHistoryFromJSON,
  AuthHistoryToJSON,
  ChangePassword,
  ChangePasswordFromJSON,
  ChangePasswordToJSON,
  ChangeProfile,
  ChangeProfileFromJSON,
  ChangeProfileToJSON,
  ConfirmEmail,
  ConfirmEmailFromJSON,
  ConfirmEmailToJSON,
  ConfirmEmailChange,
  ConfirmEmailChangeFromJSON,
  ConfirmEmailChangeToJSON,
  ConfirmPasswordRestore,
  ConfirmPasswordRestoreFromJSON,
  ConfirmPasswordRestoreToJSON,
  ConfirmPhoneChange,
  ConfirmPhoneChangeFromJSON,
  ConfirmPhoneChangeToJSON,
  InitiateEmailChange,
  InitiateEmailChangeFromJSON,
  InitiateEmailChangeToJSON,
  InitiatePhoneChange,
  InitiatePhoneChangeFromJSON,
  InitiatePhoneChangeToJSON,
  LoginRequest,
  LoginRequestFromJSON,
  LoginRequestToJSON,
  Profile,
  ProfileFromJSON,
  ProfileToJSON,
  RestorePassword,
  RestorePasswordFromJSON,
  RestorePasswordToJSON,
  SignUpRequest,
  SignUpRequestFromJSON,
  SignUpRequestToJSON,
  SshKey,
  SshKeyFromJSON,
  SshKeyToJSON,
  SshKeyData,
  SshKeyDataFromJSON,
  SshKeyDataToJSON,
  Token,
  TokenFromJSON,
  TokenToJSON
} from "../models";

interface AddSshKeyRequest {
  sshKeyData: SshKeyData;
}

interface ChangePasswordRequest {
  changePassword: ChangePassword;
}

interface ChangeProfileRequest {
  changeProfile: ChangeProfile;
}

interface ConfirmEmailRequest {
  confirmEmail: ConfirmEmail;
}

interface ConfirmEmailChangeFirstStepRequest {
  confirmEmailChange: ConfirmEmailChange;
}

interface ConfirmEmailChangeSecondStepRequest {
  confirmEmailChange: ConfirmEmailChange;
}

interface ConfirmPasswordRestoreRequest {
  confirmPasswordRestore: ConfirmPasswordRestore;
}

interface ConfirmPhoneChangeRequest {
  confirmPhoneChange: ConfirmPhoneChange;
}

interface DeleteSshKeyRequest {
  id: string;
}

interface InitiateEmailChangeRequest {
  initiateEmailChange: InitiateEmailChange;
}

interface InitiatePhoneChangeRequest {
  initiatePhoneChange: InitiatePhoneChange;
}

interface LoginOperationRequest {
  loginRequest: LoginRequest;
}

interface RestorePasswordRequest {
  restorePassword: RestorePassword;
}

interface SignUpOperationRequest {
  signUpRequest: SignUpRequest;
}

interface UpdateSshKeyRequest {
  id: string;
  sshKeyData: SshKeyData;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   */
  private async addSshKeyRaw(requestParameters: AddSshKeyRequest): Promise<runtime.ApiResponse<SshKey>> {
    this.addSshKeyValidation(requestParameters);
    const context = this.addSshKeyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SshKeyFromJSON(jsonValue));
  }

  /**
   */
  private addSshKeyValidation(requestParameters: AddSshKeyRequest) {
    if (requestParameters.sshKeyData === null || requestParameters.sshKeyData === undefined) {
      throw new runtime.RequiredError(
        "sshKeyData",
        "Required parameter requestParameters.sshKeyData was null or undefined when calling addSshKey."
      );
    }
  }

  /**
   */
  private addSshKeyContext(requestParameters: AddSshKeyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/ssh-keys`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SshKeyDataToJSON(requestParameters.sshKeyData)
    };
  }

  /**
   */
  addSshKey = async (sshKeyData: SshKeyData): Promise<SshKey> => {
    const response = await this.addSshKeyRaw({ sshKeyData: sshKeyData });
    return await response.value();
  };

  /**
   */
  private async authHistoryRaw(): Promise<runtime.ApiResponse<Array<AuthHistory>>> {
    this.authHistoryValidation();
    const context = this.authHistoryContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AuthHistoryFromJSON));
  }

  /**
   */
  private authHistoryValidation() {}

  /**
   */
  private authHistoryContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/auth-history`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  authHistory = async (): Promise<Array<AuthHistory>> => {
    const response = await this.authHistoryRaw();
    return await response.value();
  };

  useAuthHistory(config?: ConfigInterface<Array<AuthHistory>, Error>) {
    let valid = true;

    const context = this.authHistoryContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.authHistory() : undefined, config);
  }

  /**
   */
  private async changePasswordRaw(requestParameters: ChangePasswordRequest): Promise<runtime.ApiResponse<void>> {
    this.changePasswordValidation(requestParameters);
    const context = this.changePasswordContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private changePasswordValidation(requestParameters: ChangePasswordRequest) {
    if (requestParameters.changePassword === null || requestParameters.changePassword === undefined) {
      throw new runtime.RequiredError(
        "changePassword",
        "Required parameter requestParameters.changePassword was null or undefined when calling changePassword."
      );
    }
  }

  /**
   */
  private changePasswordContext(requestParameters: ChangePasswordRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/password`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ChangePasswordToJSON(requestParameters.changePassword)
    };
  }

  /**
   */
  changePassword = async (changePassword: ChangePassword): Promise<void> => {
    await this.changePasswordRaw({ changePassword: changePassword });
  };

  /**
   */
  private async changeProfileRaw(requestParameters: ChangeProfileRequest): Promise<runtime.ApiResponse<void>> {
    this.changeProfileValidation(requestParameters);
    const context = this.changeProfileContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private changeProfileValidation(requestParameters: ChangeProfileRequest) {
    if (requestParameters.changeProfile === null || requestParameters.changeProfile === undefined) {
      throw new runtime.RequiredError(
        "changeProfile",
        "Required parameter requestParameters.changeProfile was null or undefined when calling changeProfile."
      );
    }
  }

  /**
   */
  private changeProfileContext(requestParameters: ChangeProfileRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ChangeProfileToJSON(requestParameters.changeProfile)
    };
  }

  /**
   */
  changeProfile = async (changeProfile: ChangeProfile): Promise<void> => {
    await this.changeProfileRaw({ changeProfile: changeProfile });
  };

  /**
   */
  private async confirmEmailRaw(requestParameters: ConfirmEmailRequest): Promise<runtime.ApiResponse<void>> {
    this.confirmEmailValidation(requestParameters);
    const context = this.confirmEmailContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private confirmEmailValidation(requestParameters: ConfirmEmailRequest) {
    if (requestParameters.confirmEmail === null || requestParameters.confirmEmail === undefined) {
      throw new runtime.RequiredError(
        "confirmEmail",
        "Required parameter requestParameters.confirmEmail was null or undefined when calling confirmEmail."
      );
    }
  }

  /**
   */
  private confirmEmailContext(requestParameters: ConfirmEmailRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/email/confirm`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ConfirmEmailToJSON(requestParameters.confirmEmail)
    };
  }

  /**
   */
  confirmEmail = async (confirmEmail: ConfirmEmail): Promise<void> => {
    await this.confirmEmailRaw({ confirmEmail: confirmEmail });
  };

  /**
   */
  private async confirmEmailChangeFirstStepRaw(
    requestParameters: ConfirmEmailChangeFirstStepRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.confirmEmailChangeFirstStepValidation(requestParameters);
    const context = this.confirmEmailChangeFirstStepContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private confirmEmailChangeFirstStepValidation(requestParameters: ConfirmEmailChangeFirstStepRequest) {
    if (requestParameters.confirmEmailChange === null || requestParameters.confirmEmailChange === undefined) {
      throw new runtime.RequiredError(
        "confirmEmailChange",
        "Required parameter requestParameters.confirmEmailChange was null or undefined when calling confirmEmailChangeFirstStep."
      );
    }
  }

  /**
   */
  private confirmEmailChangeFirstStepContext(
    requestParameters: ConfirmEmailChangeFirstStepRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/email/confirm-change-first-step`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ConfirmEmailChangeToJSON(requestParameters.confirmEmailChange)
    };
  }

  /**
   */
  confirmEmailChangeFirstStep = async (confirmEmailChange: ConfirmEmailChange): Promise<void> => {
    await this.confirmEmailChangeFirstStepRaw({ confirmEmailChange: confirmEmailChange });
  };

  /**
   */
  private async confirmEmailChangeSecondStepRaw(
    requestParameters: ConfirmEmailChangeSecondStepRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.confirmEmailChangeSecondStepValidation(requestParameters);
    const context = this.confirmEmailChangeSecondStepContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private confirmEmailChangeSecondStepValidation(requestParameters: ConfirmEmailChangeSecondStepRequest) {
    if (requestParameters.confirmEmailChange === null || requestParameters.confirmEmailChange === undefined) {
      throw new runtime.RequiredError(
        "confirmEmailChange",
        "Required parameter requestParameters.confirmEmailChange was null or undefined when calling confirmEmailChangeSecondStep."
      );
    }
  }

  /**
   */
  private confirmEmailChangeSecondStepContext(
    requestParameters: ConfirmEmailChangeSecondStepRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/email/confirm-change-second-step`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ConfirmEmailChangeToJSON(requestParameters.confirmEmailChange)
    };
  }

  /**
   */
  confirmEmailChangeSecondStep = async (confirmEmailChange: ConfirmEmailChange): Promise<void> => {
    await this.confirmEmailChangeSecondStepRaw({ confirmEmailChange: confirmEmailChange });
  };

  /**
   */
  private async confirmPasswordRestoreRaw(
    requestParameters: ConfirmPasswordRestoreRequest
  ): Promise<runtime.ApiResponse<Token>> {
    this.confirmPasswordRestoreValidation(requestParameters);
    const context = this.confirmPasswordRestoreContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TokenFromJSON(jsonValue));
  }

  /**
   */
  private confirmPasswordRestoreValidation(requestParameters: ConfirmPasswordRestoreRequest) {
    if (requestParameters.confirmPasswordRestore === null || requestParameters.confirmPasswordRestore === undefined) {
      throw new runtime.RequiredError(
        "confirmPasswordRestore",
        "Required parameter requestParameters.confirmPasswordRestore was null or undefined when calling confirmPasswordRestore."
      );
    }
  }

  /**
   */
  private confirmPasswordRestoreContext(requestParameters: ConfirmPasswordRestoreRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/confirm-restore-password`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ConfirmPasswordRestoreToJSON(requestParameters.confirmPasswordRestore)
    };
  }

  /**
   */
  confirmPasswordRestore = async (confirmPasswordRestore: ConfirmPasswordRestore): Promise<Token> => {
    const response = await this.confirmPasswordRestoreRaw({ confirmPasswordRestore: confirmPasswordRestore });
    return await response.value();
  };

  /**
   */
  private async confirmPhoneChangeRaw(
    requestParameters: ConfirmPhoneChangeRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.confirmPhoneChangeValidation(requestParameters);
    const context = this.confirmPhoneChangeContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private confirmPhoneChangeValidation(requestParameters: ConfirmPhoneChangeRequest) {
    if (requestParameters.confirmPhoneChange === null || requestParameters.confirmPhoneChange === undefined) {
      throw new runtime.RequiredError(
        "confirmPhoneChange",
        "Required parameter requestParameters.confirmPhoneChange was null or undefined when calling confirmPhoneChange."
      );
    }
  }

  /**
   */
  private confirmPhoneChangeContext(requestParameters: ConfirmPhoneChangeRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/phone/confirm-change`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ConfirmPhoneChangeToJSON(requestParameters.confirmPhoneChange)
    };
  }

  /**
   */
  confirmPhoneChange = async (confirmPhoneChange: ConfirmPhoneChange): Promise<void> => {
    await this.confirmPhoneChangeRaw({ confirmPhoneChange: confirmPhoneChange });
  };

  /**
   */
  private async deleteSshKeyRaw(requestParameters: DeleteSshKeyRequest): Promise<runtime.ApiResponse<void>> {
    this.deleteSshKeyValidation(requestParameters);
    const context = this.deleteSshKeyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private deleteSshKeyValidation(requestParameters: DeleteSshKeyRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteSshKey."
      );
    }
  }

  /**
   */
  private deleteSshKeyContext(requestParameters: DeleteSshKeyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/ssh-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  deleteSshKey = async (id: string): Promise<void> => {
    await this.deleteSshKeyRaw({ id: id });
  };

  useDeleteSshKey(id: string, config?: ConfigInterface<void, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.deleteSshKeyContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.deleteSshKey(id!) : undefined, config);
  }

  /**
   */
  private async initiateEmailChangeRaw(
    requestParameters: InitiateEmailChangeRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.initiateEmailChangeValidation(requestParameters);
    const context = this.initiateEmailChangeContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private initiateEmailChangeValidation(requestParameters: InitiateEmailChangeRequest) {
    if (requestParameters.initiateEmailChange === null || requestParameters.initiateEmailChange === undefined) {
      throw new runtime.RequiredError(
        "initiateEmailChange",
        "Required parameter requestParameters.initiateEmailChange was null or undefined when calling initiateEmailChange."
      );
    }
  }

  /**
   */
  private initiateEmailChangeContext(requestParameters: InitiateEmailChangeRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/email/initiate-change`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InitiateEmailChangeToJSON(requestParameters.initiateEmailChange)
    };
  }

  /**
   */
  initiateEmailChange = async (initiateEmailChange: InitiateEmailChange): Promise<void> => {
    await this.initiateEmailChangeRaw({ initiateEmailChange: initiateEmailChange });
  };

  /**
   */
  private async initiatePhoneChangeRaw(
    requestParameters: InitiatePhoneChangeRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.initiatePhoneChangeValidation(requestParameters);
    const context = this.initiatePhoneChangeContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private initiatePhoneChangeValidation(requestParameters: InitiatePhoneChangeRequest) {
    if (requestParameters.initiatePhoneChange === null || requestParameters.initiatePhoneChange === undefined) {
      throw new runtime.RequiredError(
        "initiatePhoneChange",
        "Required parameter requestParameters.initiatePhoneChange was null or undefined when calling initiatePhoneChange."
      );
    }
  }

  /**
   */
  private initiatePhoneChangeContext(requestParameters: InitiatePhoneChangeRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/phone/initiate-change`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InitiatePhoneChangeToJSON(requestParameters.initiatePhoneChange)
    };
  }

  /**
   */
  initiatePhoneChange = async (initiatePhoneChange: InitiatePhoneChange): Promise<void> => {
    await this.initiatePhoneChangeRaw({ initiatePhoneChange: initiatePhoneChange });
  };

  /**
   */
  private async loginRaw(requestParameters: LoginOperationRequest): Promise<runtime.ApiResponse<Token>> {
    this.loginValidation(requestParameters);
    const context = this.loginContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TokenFromJSON(jsonValue));
  }

  /**
   */
  private loginValidation(requestParameters: LoginOperationRequest) {
    if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
      throw new runtime.RequiredError(
        "loginRequest",
        "Required parameter requestParameters.loginRequest was null or undefined when calling login."
      );
    }
  }

  /**
   */
  private loginContext(requestParameters: LoginOperationRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/login`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: LoginRequestToJSON(requestParameters.loginRequest)
    };
  }

  /**
   */
  login = async (loginRequest: LoginRequest): Promise<Token> => {
    const response = await this.loginRaw({ loginRequest: loginRequest });
    return await response.value();
  };

  /**
   */
  private async profileRaw(): Promise<runtime.ApiResponse<Profile>> {
    this.profileValidation();
    const context = this.profileContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => ProfileFromJSON(jsonValue));
  }

  /**
   */
  private profileValidation() {}

  /**
   */
  private profileContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  profile = async (): Promise<Profile> => {
    const response = await this.profileRaw();
    return await response.value();
  };

  useProfile(config?: ConfigInterface<Profile, Error>) {
    let valid = true;

    const context = this.profileContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.profile() : undefined, config);
  }

  /**
   */
  private async reRequestEmailConfirmationCodeRaw(): Promise<runtime.ApiResponse<void>> {
    this.reRequestEmailConfirmationCodeValidation();
    const context = this.reRequestEmailConfirmationCodeContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private reRequestEmailConfirmationCodeValidation() {}

  /**
   */
  private reRequestEmailConfirmationCodeContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/re-request-email-confirmation-code`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  reRequestEmailConfirmationCode = async (): Promise<void> => {
    await this.reRequestEmailConfirmationCodeRaw();
  };

  /**
   */
  private async refreshAccessTokenRaw(): Promise<runtime.ApiResponse<Token>> {
    this.refreshAccessTokenValidation();
    const context = this.refreshAccessTokenContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TokenFromJSON(jsonValue));
  }

  /**
   */
  private refreshAccessTokenValidation() {}

  /**
   */
  private refreshAccessTokenContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/user/refresh-access-token`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  refreshAccessToken = async (): Promise<Token> => {
    const response = await this.refreshAccessTokenRaw();
    return await response.value();
  };

  /**
   */
  private async restorePasswordRaw(requestParameters: RestorePasswordRequest): Promise<runtime.ApiResponse<void>> {
    this.restorePasswordValidation(requestParameters);
    const context = this.restorePasswordContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private restorePasswordValidation(requestParameters: RestorePasswordRequest) {
    if (requestParameters.restorePassword === null || requestParameters.restorePassword === undefined) {
      throw new runtime.RequiredError(
        "restorePassword",
        "Required parameter requestParameters.restorePassword was null or undefined when calling restorePassword."
      );
    }
  }

  /**
   */
  private restorePasswordContext(requestParameters: RestorePasswordRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/restore-password`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: RestorePasswordToJSON(requestParameters.restorePassword)
    };
  }

  /**
   */
  restorePassword = async (restorePassword: RestorePassword): Promise<void> => {
    await this.restorePasswordRaw({ restorePassword: restorePassword });
  };

  /**
   */
  private async signUpRaw(requestParameters: SignUpOperationRequest): Promise<runtime.ApiResponse<Token>> {
    this.signUpValidation(requestParameters);
    const context = this.signUpContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TokenFromJSON(jsonValue));
  }

  /**
   */
  private signUpValidation(requestParameters: SignUpOperationRequest) {
    if (requestParameters.signUpRequest === null || requestParameters.signUpRequest === undefined) {
      throw new runtime.RequiredError(
        "signUpRequest",
        "Required parameter requestParameters.signUpRequest was null or undefined when calling signUp."
      );
    }
  }

  /**
   */
  private signUpContext(requestParameters: SignUpOperationRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/sign-up`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SignUpRequestToJSON(requestParameters.signUpRequest)
    };
  }

  /**
   */
  signUp = async (signUpRequest: SignUpRequest): Promise<Token> => {
    const response = await this.signUpRaw({ signUpRequest: signUpRequest });
    return await response.value();
  };

  /**
   */
  private async sshKeyListRaw(): Promise<runtime.ApiResponse<Array<SshKey>>> {
    this.sshKeyListValidation();
    const context = this.sshKeyListContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(SshKeyFromJSON));
  }

  /**
   */
  private sshKeyListValidation() {}

  /**
   */
  private sshKeyListContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/ssh-keys`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  sshKeyList = async (): Promise<Array<SshKey>> => {
    const response = await this.sshKeyListRaw();
    return await response.value();
  };

  useSshKeyList(config?: ConfigInterface<Array<SshKey>, Error>) {
    let valid = true;

    const context = this.sshKeyListContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.sshKeyList() : undefined, config);
  }

  /**
   */
  private async updateSshKeyRaw(requestParameters: UpdateSshKeyRequest): Promise<runtime.ApiResponse<SshKey>> {
    this.updateSshKeyValidation(requestParameters);
    const context = this.updateSshKeyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => SshKeyFromJSON(jsonValue));
  }

  /**
   */
  private updateSshKeyValidation(requestParameters: UpdateSshKeyRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateSshKey."
      );
    }
    if (requestParameters.sshKeyData === null || requestParameters.sshKeyData === undefined) {
      throw new runtime.RequiredError(
        "sshKeyData",
        "Required parameter requestParameters.sshKeyData was null or undefined when calling updateSshKey."
      );
    }
  }

  /**
   */
  private updateSshKeyContext(requestParameters: UpdateSshKeyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/ssh-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: SshKeyDataToJSON(requestParameters.sshKeyData)
    };
  }

  /**
   */
  updateSshKey = async (id: string, sshKeyData: SshKeyData): Promise<SshKey> => {
    const response = await this.updateSshKeyRaw({ id: id, sshKeyData: sshKeyData });
    return await response.value();
  };
}

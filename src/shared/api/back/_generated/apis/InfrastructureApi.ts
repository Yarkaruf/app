/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  Location,
  LocationFromJSON,
  LocationToJSON,
  Rack,
  RackFromJSON,
  RackToJSON,
  Server,
  ServerFromJSON,
  ServerToJSON
} from "../models";

/**
 *
 */
export class InfrastructureApi extends runtime.BaseAPI {
  /**
   */
  private async locationsRaw(): Promise<runtime.ApiResponse<Array<Location>>> {
    this.locationsValidation();
    const context = this.locationsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(LocationFromJSON));
  }

  /**
   */
  private locationsValidation() {}

  /**
   */
  private locationsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/infrastructure/location`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  locations = async (): Promise<Array<Location>> => {
    const response = await this.locationsRaw();
    return await response.value();
  };

  useLocations(config?: ConfigInterface<Array<Location>, Error>) {
    let valid = true;

    const context = this.locationsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.locations() : undefined, config);
  }

  /**
   */
  private async racksRaw(): Promise<runtime.ApiResponse<Array<Rack>>> {
    this.racksValidation();
    const context = this.racksContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(RackFromJSON));
  }

  /**
   */
  private racksValidation() {}

  /**
   */
  private racksContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/infrastructure/rack`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  racks = async (): Promise<Array<Rack>> => {
    const response = await this.racksRaw();
    return await response.value();
  };

  useRacks(config?: ConfigInterface<Array<Rack>, Error>) {
    let valid = true;

    const context = this.racksContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.racks() : undefined, config);
  }

  /**
   */
  private async serversRaw(): Promise<runtime.ApiResponse<Array<Server>>> {
    this.serversValidation();
    const context = this.serversContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(ServerFromJSON));
  }

  /**
   */
  private serversValidation() {}

  /**
   */
  private serversContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/infrastructure/server`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  servers = async (): Promise<Array<Server>> => {
    const response = await this.serversRaw();
    return await response.value();
  };

  useServers(config?: ConfigInterface<Array<Server>, Error>) {
    let valid = true;

    const context = this.serversContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.servers() : undefined, config);
  }
}

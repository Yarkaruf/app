/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  Account,
  AccountFromJSON,
  AccountToJSON,
  AdminBuyAdministrationTariff,
  AdminBuyAdministrationTariffFromJSON,
  AdminBuyAdministrationTariffToJSON,
  AdministrationHistory,
  AdministrationHistoryFromJSON,
  AdministrationHistoryToJSON,
  AdministrationTariff,
  AdministrationTariffFromJSON,
  AdministrationTariffToJSON,
  BillId,
  BillIdFromJSON,
  BillIdToJSON,
  WithdrawHours,
  WithdrawHoursFromJSON,
  WithdrawHoursToJSON
} from "../models";

interface AdministrationAccountRequest {
  id: string;
}

interface AdministrationAccountBuyRequest {
  id: string;
  adminBuyAdministrationTariff: AdminBuyAdministrationTariff;
}

interface AdministrationAccountHistoryRequest {
  id: string;
}

interface WithdrawAdministrationHoursRequest {
  id: string;
  withdrawHours: WithdrawHours;
}

/**
 *
 */
export class AdminAdministrationApi extends runtime.BaseAPI {
  /**
   */
  private async administrationAccountRaw(
    requestParameters: AdministrationAccountRequest
  ): Promise<runtime.ApiResponse<Account>> {
    this.administrationAccountValidation(requestParameters);
    const context = this.administrationAccountContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => AccountFromJSON(jsonValue));
  }

  /**
   */
  private administrationAccountValidation(requestParameters: AdministrationAccountRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling administrationAccount."
      );
    }
  }

  /**
   */
  private administrationAccountContext(requestParameters: AdministrationAccountRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/administration/account/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  administrationAccount = async (id: string): Promise<Account> => {
    const response = await this.administrationAccountRaw({ id: id });
    return await response.value();
  };

  useAdministrationAccount(id: string, config?: ConfigInterface<Account, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.administrationAccountContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.administrationAccount(id!) : undefined, config);
  }

  /**
   */
  private async administrationAccountBuyRaw(
    requestParameters: AdministrationAccountBuyRequest
  ): Promise<runtime.ApiResponse<BillId>> {
    this.administrationAccountBuyValidation(requestParameters);
    const context = this.administrationAccountBuyContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => BillIdFromJSON(jsonValue));
  }

  /**
   */
  private administrationAccountBuyValidation(requestParameters: AdministrationAccountBuyRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling administrationAccountBuy."
      );
    }
    if (
      requestParameters.adminBuyAdministrationTariff === null ||
      requestParameters.adminBuyAdministrationTariff === undefined
    ) {
      throw new runtime.RequiredError(
        "adminBuyAdministrationTariff",
        "Required parameter requestParameters.adminBuyAdministrationTariff was null or undefined when calling administrationAccountBuy."
      );
    }
  }

  /**
   */
  private administrationAccountBuyContext(requestParameters: AdministrationAccountBuyRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/administration/account/{id}/buy`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: AdminBuyAdministrationTariffToJSON(requestParameters.adminBuyAdministrationTariff)
    };
  }

  /**
   */
  administrationAccountBuy = async (
    id: string,
    adminBuyAdministrationTariff: AdminBuyAdministrationTariff
  ): Promise<BillId> => {
    const response = await this.administrationAccountBuyRaw({
      id: id,
      adminBuyAdministrationTariff: adminBuyAdministrationTariff
    });
    return await response.value();
  };

  /**
   */
  private async administrationAccountHistoryRaw(
    requestParameters: AdministrationAccountHistoryRequest
  ): Promise<runtime.ApiResponse<Array<AdministrationHistory>>> {
    this.administrationAccountHistoryValidation(requestParameters);
    const context = this.administrationAccountHistoryContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AdministrationHistoryFromJSON));
  }

  /**
   */
  private administrationAccountHistoryValidation(requestParameters: AdministrationAccountHistoryRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling administrationAccountHistory."
      );
    }
  }

  /**
   */
  private administrationAccountHistoryContext(
    requestParameters: AdministrationAccountHistoryRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/administration/account/{id}/history`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  administrationAccountHistory = async (id: string): Promise<Array<AdministrationHistory>> => {
    const response = await this.administrationAccountHistoryRaw({ id: id });
    return await response.value();
  };

  useAdministrationAccountHistory(id: string, config?: ConfigInterface<Array<AdministrationHistory>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.administrationAccountHistoryContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.administrationAccountHistory(id!) : undefined, config);
  }

  /**
   */
  private async tariffsRaw(): Promise<runtime.ApiResponse<Array<AdministrationTariff>>> {
    this.tariffsValidation();
    const context = this.tariffsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AdministrationTariffFromJSON));
  }

  /**
   */
  private tariffsValidation() {}

  /**
   */
  private tariffsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/administration/tariff`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tariffs = async (): Promise<Array<AdministrationTariff>> => {
    const response = await this.tariffsRaw();
    return await response.value();
  };

  useTariffs(config?: ConfigInterface<Array<AdministrationTariff>, Error>) {
    let valid = true;

    const context = this.tariffsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.tariffs() : undefined, config);
  }

  /**
   */
  private async withdrawAdministrationHoursRaw(
    requestParameters: WithdrawAdministrationHoursRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.withdrawAdministrationHoursValidation(requestParameters);
    const context = this.withdrawAdministrationHoursContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private withdrawAdministrationHoursValidation(requestParameters: WithdrawAdministrationHoursRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling withdrawAdministrationHours."
      );
    }
    if (requestParameters.withdrawHours === null || requestParameters.withdrawHours === undefined) {
      throw new runtime.RequiredError(
        "withdrawHours",
        "Required parameter requestParameters.withdrawHours was null or undefined when calling withdrawAdministrationHours."
      );
    }
  }

  /**
   */
  private withdrawAdministrationHoursContext(
    requestParameters: WithdrawAdministrationHoursRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/administration/account/{id}/withdraw`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: WithdrawHoursToJSON(requestParameters.withdrawHours)
    };
  }

  /**
   */
  withdrawAdministrationHours = async (id: string, withdrawHours: WithdrawHours): Promise<void> => {
    await this.withdrawAdministrationHoursRaw({ id: id, withdrawHours: withdrawHours });
  };
}

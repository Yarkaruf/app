/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  Admin,
  AdminFromJSON,
  AdminToJSON,
  BlockAdmin,
  BlockAdminFromJSON,
  BlockAdminToJSON,
  CreateAdmin,
  CreateAdminFromJSON,
  CreateAdminToJSON,
  UpdateAdmin,
  UpdateAdminFromJSON,
  UpdateAdminToJSON
} from "../models";

interface AdminRequest {
  id: string;
}

interface AdminBlockRequest {
  id: string;
  blockAdmin: BlockAdmin;
}

interface AdminCreateRequest {
  createAdmin: CreateAdmin;
}

interface AdminUnblockRequest {
  id: string;
}

interface AdminUpdateRequest {
  id: string;
  updateAdmin: UpdateAdmin;
}

/**
 *
 */
export class AdminAdminApi extends runtime.BaseAPI {
  /**
   */
  private async adminRaw(requestParameters: AdminRequest): Promise<runtime.ApiResponse<Admin>> {
    this.adminValidation(requestParameters);
    const context = this.adminContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => AdminFromJSON(jsonValue));
  }

  /**
   */
  private adminValidation(requestParameters: AdminRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling admin."
      );
    }
  }

  /**
   */
  private adminContext(requestParameters: AdminRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/admin/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  admin = async (id: string): Promise<Admin> => {
    const response = await this.adminRaw({ id: id });
    return await response.value();
  };

  useAdmin(id: string, config?: ConfigInterface<Admin, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.adminContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.admin(id!) : undefined, config);
  }

  /**
   */
  private async adminBlockRaw(requestParameters: AdminBlockRequest): Promise<runtime.ApiResponse<void>> {
    this.adminBlockValidation(requestParameters);
    const context = this.adminBlockContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private adminBlockValidation(requestParameters: AdminBlockRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling adminBlock."
      );
    }
    if (requestParameters.blockAdmin === null || requestParameters.blockAdmin === undefined) {
      throw new runtime.RequiredError(
        "blockAdmin",
        "Required parameter requestParameters.blockAdmin was null or undefined when calling adminBlock."
      );
    }
  }

  /**
   */
  private adminBlockContext(requestParameters: AdminBlockRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/admin/{id}/block`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: BlockAdminToJSON(requestParameters.blockAdmin)
    };
  }

  /**
   */
  adminBlock = async (id: string, blockAdmin: BlockAdmin): Promise<void> => {
    await this.adminBlockRaw({ id: id, blockAdmin: blockAdmin });
  };

  /**
   */
  private async adminCreateRaw(requestParameters: AdminCreateRequest): Promise<runtime.ApiResponse<Admin>> {
    this.adminCreateValidation(requestParameters);
    const context = this.adminCreateContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => AdminFromJSON(jsonValue));
  }

  /**
   */
  private adminCreateValidation(requestParameters: AdminCreateRequest) {
    if (requestParameters.createAdmin === null || requestParameters.createAdmin === undefined) {
      throw new runtime.RequiredError(
        "createAdmin",
        "Required parameter requestParameters.createAdmin was null or undefined when calling adminCreate."
      );
    }
  }

  /**
   */
  private adminCreateContext(requestParameters: AdminCreateRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/admin`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateAdminToJSON(requestParameters.createAdmin)
    };
  }

  /**
   */
  adminCreate = async (createAdmin: CreateAdmin): Promise<Admin> => {
    const response = await this.adminCreateRaw({ createAdmin: createAdmin });
    return await response.value();
  };

  /**
   */
  private async adminRolesRaw(): Promise<runtime.ApiResponse<void>> {
    this.adminRolesValidation();
    const context = this.adminRolesContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private adminRolesValidation() {}

  /**
   */
  private adminRolesContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/admin/common/roles`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  adminRoles = async (): Promise<void> => {
    await this.adminRolesRaw();
  };

  useAdminRoles(config?: ConfigInterface<void, Error>) {
    let valid = true;

    const context = this.adminRolesContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.adminRoles() : undefined, config);
  }

  /**
   */
  private async adminUnblockRaw(requestParameters: AdminUnblockRequest): Promise<runtime.ApiResponse<void>> {
    this.adminUnblockValidation(requestParameters);
    const context = this.adminUnblockContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private adminUnblockValidation(requestParameters: AdminUnblockRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling adminUnblock."
      );
    }
  }

  /**
   */
  private adminUnblockContext(requestParameters: AdminUnblockRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/admin/{id}/unblock`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  adminUnblock = async (id: string): Promise<void> => {
    await this.adminUnblockRaw({ id: id });
  };

  /**
   */
  private async adminUpdateRaw(requestParameters: AdminUpdateRequest): Promise<runtime.ApiResponse<Admin>> {
    this.adminUpdateValidation(requestParameters);
    const context = this.adminUpdateContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => AdminFromJSON(jsonValue));
  }

  /**
   */
  private adminUpdateValidation(requestParameters: AdminUpdateRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling adminUpdate."
      );
    }
    if (requestParameters.updateAdmin === null || requestParameters.updateAdmin === undefined) {
      throw new runtime.RequiredError(
        "updateAdmin",
        "Required parameter requestParameters.updateAdmin was null or undefined when calling adminUpdate."
      );
    }
  }

  /**
   */
  private adminUpdateContext(requestParameters: AdminUpdateRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/admin/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UpdateAdminToJSON(requestParameters.updateAdmin)
    };
  }

  /**
   */
  adminUpdate = async (id: string, updateAdmin: UpdateAdmin): Promise<Admin> => {
    const response = await this.adminUpdateRaw({ id: id, updateAdmin: updateAdmin });
    return await response.value();
  };

  /**
   */
  private async adminsRaw(): Promise<runtime.ApiResponse<Array<Admin>>> {
    this.adminsValidation();
    const context = this.adminsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AdminFromJSON));
  }

  /**
   */
  private adminsValidation() {}

  /**
   */
  private adminsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/admin`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  admins = async (): Promise<Array<Admin>> => {
    const response = await this.adminsRaw();
    return await response.value();
  };

  useAdmins(config?: ConfigInterface<Array<Admin>, Error>) {
    let valid = true;

    const context = this.adminsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.admins() : undefined, config);
  }
}

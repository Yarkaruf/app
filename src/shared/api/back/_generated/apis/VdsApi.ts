/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  DataCenter,
  DataCenterFromJSON,
  DataCenterToJSON,
  Os,
  OsFromJSON,
  OsToJSON,
  ProBackupConfig,
  ProBackupConfigFromJSON,
  ProBackupConfigToJSON,
  VdsBackup,
  VdsBackupFromJSON,
  VdsBackupToJSON,
  VdsHistory,
  VdsHistoryFromJSON,
  VdsHistoryToJSON,
  VdsInstance,
  VdsInstanceFromJSON,
  VdsInstanceToJSON,
  VdsInstanceDto,
  VdsInstanceDtoFromJSON,
  VdsInstanceDtoToJSON,
  VdsInvoiceId,
  VdsInvoiceIdFromJSON,
  VdsInvoiceIdToJSON,
  VdsMove,
  VdsMoveFromJSON,
  VdsMoveToJSON,
  VdsOrder,
  VdsOrderFromJSON,
  VdsOrderToJSON,
  VdsReinstall,
  VdsReinstallFromJSON,
  VdsReinstallToJSON,
  VdsRename,
  VdsRenameFromJSON,
  VdsRenameToJSON,
  VdsRestore,
  VdsRestoreFromJSON,
  VdsRestoreToJSON,
  VdsTariff,
  VdsTariffFromJSON,
  VdsTariffToJSON,
  VdsTariffChange,
  VdsTariffChangeFromJSON,
  VdsTariffChangeToJSON,
  VncCredentials,
  VncCredentialsFromJSON,
  VncCredentialsToJSON
} from "../models";

interface CreateVdsOrderRequest {
  vdsInstanceDto: VdsInstanceDto;
}

interface VdsRequest {
  id: string;
}

interface VdsAvailableTariffsRequest {
  id: string;
}

interface VdsBackupsRequest {
  id: string;
}

interface VdsDeleteRequest {
  id: string;
}

interface VdsEnableVncRequest {
  id: string;
}

interface VdsHistoryRequest {
  id: string;
}

interface VdsMoveRequest {
  id: string;
  vdsMove: VdsMove;
}

interface VdsOffRequest {
  id: string;
}

interface VdsOnRequest {
  id: string;
}

interface VdsProBackupConfigUpdateRequest {
  id: string;
  proBackupConfig: ProBackupConfig;
}

interface VdsProBackupDisableRequest {
  id: string;
}

interface VdsProBackupEnableRequest {
  id: string;
}

interface VdsRebootRequest {
  id: string;
}

interface VdsReinstallRequest {
  id: string;
  vdsReinstall: VdsReinstall;
}

interface VdsRenameRequest {
  id: string;
  vdsRename: VdsRename;
}

interface VdsRestoreRequest {
  id: string;
  vdsRestore: VdsRestore;
}

interface VdsTariffRequest {
  id: string;
}

interface VdsTariffChangeRequest {
  id: string;
  vdsTariffChange: VdsTariffChange;
}

interface VdsVncRequest {
  id: string;
}

/**
 *
 */
export class VdsApi extends runtime.BaseAPI {
  /**
   */
  private async createVdsOrderRaw(
    requestParameters: CreateVdsOrderRequest
  ): Promise<runtime.ApiResponse<Array<VdsOrder>>> {
    this.createVdsOrderValidation(requestParameters);
    const context = this.createVdsOrderContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(VdsOrderFromJSON));
  }

  /**
   */
  private createVdsOrderValidation(requestParameters: CreateVdsOrderRequest) {
    if (requestParameters.vdsInstanceDto === null || requestParameters.vdsInstanceDto === undefined) {
      throw new runtime.RequiredError(
        "vdsInstanceDto",
        "Required parameter requestParameters.vdsInstanceDto was null or undefined when calling createVdsOrder."
      );
    }
  }

  /**
   */
  private createVdsOrderContext(requestParameters: CreateVdsOrderRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: VdsInstanceDtoToJSON(requestParameters.vdsInstanceDto)
    };
  }

  /**
   */
  createVdsOrder = async (vdsInstanceDto: VdsInstanceDto): Promise<Array<VdsOrder>> => {
    const response = await this.createVdsOrderRaw({ vdsInstanceDto: vdsInstanceDto });
    return await response.value();
  };

  /**
   */
  private async vdsRaw(requestParameters: VdsRequest): Promise<runtime.ApiResponse<VdsInstance>> {
    this.vdsValidation(requestParameters);
    const context = this.vdsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => VdsInstanceFromJSON(jsonValue));
  }

  /**
   */
  private vdsValidation(requestParameters: VdsRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vds."
      );
    }
  }

  /**
   */
  private vdsContext(requestParameters: VdsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vds = async (id: string): Promise<VdsInstance> => {
    const response = await this.vdsRaw({ id: id });
    return await response.value();
  };

  useVds(id: string, config?: ConfigInterface<VdsInstance, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.vdsContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vds(id!) : undefined, config);
  }

  /**
   */
  private async vdsAvailableTariffsRaw(
    requestParameters: VdsAvailableTariffsRequest
  ): Promise<runtime.ApiResponse<Array<VdsTariff>>> {
    this.vdsAvailableTariffsValidation(requestParameters);
    const context = this.vdsAvailableTariffsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(VdsTariffFromJSON));
  }

  /**
   */
  private vdsAvailableTariffsValidation(requestParameters: VdsAvailableTariffsRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsAvailableTariffs."
      );
    }
  }

  /**
   */
  private vdsAvailableTariffsContext(requestParameters: VdsAvailableTariffsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/vds/tariff/{id}/available`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsAvailableTariffs = async (id: string): Promise<Array<VdsTariff>> => {
    const response = await this.vdsAvailableTariffsRaw({ id: id });
    return await response.value();
  };

  useVdsAvailableTariffs(id: string, config?: ConfigInterface<Array<VdsTariff>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.vdsAvailableTariffsContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsAvailableTariffs(id!) : undefined, config);
  }

  /**
   */
  private async vdsBackupsRaw(requestParameters: VdsBackupsRequest): Promise<runtime.ApiResponse<Array<VdsBackup>>> {
    this.vdsBackupsValidation(requestParameters);
    const context = this.vdsBackupsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(VdsBackupFromJSON));
  }

  /**
   */
  private vdsBackupsValidation(requestParameters: VdsBackupsRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsBackups."
      );
    }
  }

  /**
   */
  private vdsBackupsContext(requestParameters: VdsBackupsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/backups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsBackups = async (id: string): Promise<Array<VdsBackup>> => {
    const response = await this.vdsBackupsRaw({ id: id });
    return await response.value();
  };

  useVdsBackups(id: string, config?: ConfigInterface<Array<VdsBackup>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.vdsBackupsContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsBackups(id!) : undefined, config);
  }

  /**
   */
  private async vdsDataCentersRaw(): Promise<runtime.ApiResponse<Array<DataCenter>>> {
    this.vdsDataCentersValidation();
    const context = this.vdsDataCentersContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(DataCenterFromJSON));
  }

  /**
   */
  private vdsDataCentersValidation() {}

  /**
   */
  private vdsDataCentersContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/vds/common/data-centers`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsDataCenters = async (): Promise<Array<DataCenter>> => {
    const response = await this.vdsDataCentersRaw();
    return await response.value();
  };

  useVdsDataCenters(config?: ConfigInterface<Array<DataCenter>, Error>) {
    let valid = true;

    const context = this.vdsDataCentersContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsDataCenters() : undefined, config);
  }

  /**
   */
  private async vdsDeleteRaw(requestParameters: VdsDeleteRequest): Promise<runtime.ApiResponse<VdsInvoiceId>> {
    this.vdsDeleteValidation(requestParameters);
    const context = this.vdsDeleteContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => VdsInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private vdsDeleteValidation(requestParameters: VdsDeleteRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsDelete."
      );
    }
  }

  /**
   */
  private vdsDeleteContext(requestParameters: VdsDeleteRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsDelete = async (id: string): Promise<VdsInvoiceId> => {
    const response = await this.vdsDeleteRaw({ id: id });
    return await response.value();
  };

  useVdsDelete(id: string, config?: ConfigInterface<VdsInvoiceId, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.vdsDeleteContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsDelete(id!) : undefined, config);
  }

  /**
   */
  private async vdsEnableVncRaw(requestParameters: VdsEnableVncRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsEnableVncValidation(requestParameters);
    const context = this.vdsEnableVncContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsEnableVncValidation(requestParameters: VdsEnableVncRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsEnableVnc."
      );
    }
  }

  /**
   */
  private vdsEnableVncContext(requestParameters: VdsEnableVncRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/vnc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsEnableVnc = async (id: string): Promise<void> => {
    await this.vdsEnableVncRaw({ id: id });
  };

  /**
   */
  private async vdsHistoryRaw(requestParameters: VdsHistoryRequest): Promise<runtime.ApiResponse<Array<VdsHistory>>> {
    this.vdsHistoryValidation(requestParameters);
    const context = this.vdsHistoryContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(VdsHistoryFromJSON));
  }

  /**
   */
  private vdsHistoryValidation(requestParameters: VdsHistoryRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsHistory."
      );
    }
  }

  /**
   */
  private vdsHistoryContext(requestParameters: VdsHistoryRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/history`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsHistory = async (id: string): Promise<Array<VdsHistory>> => {
    const response = await this.vdsHistoryRaw({ id: id });
    return await response.value();
  };

  useVdsHistory(id: string, config?: ConfigInterface<Array<VdsHistory>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.vdsHistoryContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsHistory(id!) : undefined, config);
  }

  /**
   */
  private async vdsListRaw(): Promise<runtime.ApiResponse<Array<VdsInstance>>> {
    this.vdsListValidation();
    const context = this.vdsListContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(VdsInstanceFromJSON));
  }

  /**
   */
  private vdsListValidation() {}

  /**
   */
  private vdsListContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsList = async (): Promise<Array<VdsInstance>> => {
    const response = await this.vdsListRaw();
    return await response.value();
  };

  useVdsList(config?: ConfigInterface<Array<VdsInstance>, Error>) {
    let valid = true;

    const context = this.vdsListContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsList() : undefined, config);
  }

  /**
   */
  private async vdsMoveRaw(requestParameters: VdsMoveRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsMoveValidation(requestParameters);
    const context = this.vdsMoveContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsMoveValidation(requestParameters: VdsMoveRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsMove."
      );
    }
    if (requestParameters.vdsMove === null || requestParameters.vdsMove === undefined) {
      throw new runtime.RequiredError(
        "vdsMove",
        "Required parameter requestParameters.vdsMove was null or undefined when calling vdsMove."
      );
    }
  }

  /**
   */
  private vdsMoveContext(requestParameters: VdsMoveRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/project`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: VdsMoveToJSON(requestParameters.vdsMove)
    };
  }

  /**
   */
  vdsMove = async (id: string, vdsMove: VdsMove): Promise<void> => {
    await this.vdsMoveRaw({ id: id, vdsMove: vdsMove });
  };

  /**
   */
  private async vdsOffRaw(requestParameters: VdsOffRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsOffValidation(requestParameters);
    const context = this.vdsOffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsOffValidation(requestParameters: VdsOffRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsOff."
      );
    }
  }

  /**
   */
  private vdsOffContext(requestParameters: VdsOffRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/power/off`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsOff = async (id: string): Promise<void> => {
    await this.vdsOffRaw({ id: id });
  };

  /**
   */
  private async vdsOnRaw(requestParameters: VdsOnRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsOnValidation(requestParameters);
    const context = this.vdsOnContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsOnValidation(requestParameters: VdsOnRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsOn."
      );
    }
  }

  /**
   */
  private vdsOnContext(requestParameters: VdsOnRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/power/on`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsOn = async (id: string): Promise<void> => {
    await this.vdsOnRaw({ id: id });
  };

  /**
   */
  private async vdsOperatingSystemsRaw(): Promise<runtime.ApiResponse<Array<Os>>> {
    this.vdsOperatingSystemsValidation();
    const context = this.vdsOperatingSystemsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(OsFromJSON));
  }

  /**
   */
  private vdsOperatingSystemsValidation() {}

  /**
   */
  private vdsOperatingSystemsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/vds/common/os`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsOperatingSystems = async (): Promise<Array<Os>> => {
    const response = await this.vdsOperatingSystemsRaw();
    return await response.value();
  };

  useVdsOperatingSystems(config?: ConfigInterface<Array<Os>, Error>) {
    let valid = true;

    const context = this.vdsOperatingSystemsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsOperatingSystems() : undefined, config);
  }

  /**
   */
  private async vdsProBackupConfigUpdateRaw(
    requestParameters: VdsProBackupConfigUpdateRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.vdsProBackupConfigUpdateValidation(requestParameters);
    const context = this.vdsProBackupConfigUpdateContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsProBackupConfigUpdateValidation(requestParameters: VdsProBackupConfigUpdateRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsProBackupConfigUpdate."
      );
    }
    if (requestParameters.proBackupConfig === null || requestParameters.proBackupConfig === undefined) {
      throw new runtime.RequiredError(
        "proBackupConfig",
        "Required parameter requestParameters.proBackupConfig was null or undefined when calling vdsProBackupConfigUpdate."
      );
    }
  }

  /**
   */
  private vdsProBackupConfigUpdateContext(requestParameters: VdsProBackupConfigUpdateRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/pro-backup/config`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ProBackupConfigToJSON(requestParameters.proBackupConfig)
    };
  }

  /**
   */
  vdsProBackupConfigUpdate = async (id: string, proBackupConfig: ProBackupConfig): Promise<void> => {
    await this.vdsProBackupConfigUpdateRaw({ id: id, proBackupConfig: proBackupConfig });
  };

  /**
   */
  private async vdsProBackupDisableRaw(
    requestParameters: VdsProBackupDisableRequest
  ): Promise<runtime.ApiResponse<VdsInvoiceId>> {
    this.vdsProBackupDisableValidation(requestParameters);
    const context = this.vdsProBackupDisableContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => VdsInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private vdsProBackupDisableValidation(requestParameters: VdsProBackupDisableRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsProBackupDisable."
      );
    }
  }

  /**
   */
  private vdsProBackupDisableContext(requestParameters: VdsProBackupDisableRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/pro-backup/disable`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsProBackupDisable = async (id: string): Promise<VdsInvoiceId> => {
    const response = await this.vdsProBackupDisableRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async vdsProBackupEnableRaw(
    requestParameters: VdsProBackupEnableRequest
  ): Promise<runtime.ApiResponse<VdsInvoiceId>> {
    this.vdsProBackupEnableValidation(requestParameters);
    const context = this.vdsProBackupEnableContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => VdsInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private vdsProBackupEnableValidation(requestParameters: VdsProBackupEnableRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsProBackupEnable."
      );
    }
  }

  /**
   */
  private vdsProBackupEnableContext(requestParameters: VdsProBackupEnableRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/pro-backup/enable`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsProBackupEnable = async (id: string): Promise<VdsInvoiceId> => {
    const response = await this.vdsProBackupEnableRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async vdsRebootRaw(requestParameters: VdsRebootRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsRebootValidation(requestParameters);
    const context = this.vdsRebootContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsRebootValidation(requestParameters: VdsRebootRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsReboot."
      );
    }
  }

  /**
   */
  private vdsRebootContext(requestParameters: VdsRebootRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/reboot`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsReboot = async (id: string): Promise<void> => {
    await this.vdsRebootRaw({ id: id });
  };

  /**
   */
  private async vdsReinstallRaw(requestParameters: VdsReinstallRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsReinstallValidation(requestParameters);
    const context = this.vdsReinstallContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsReinstallValidation(requestParameters: VdsReinstallRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsReinstall."
      );
    }
    if (requestParameters.vdsReinstall === null || requestParameters.vdsReinstall === undefined) {
      throw new runtime.RequiredError(
        "vdsReinstall",
        "Required parameter requestParameters.vdsReinstall was null or undefined when calling vdsReinstall."
      );
    }
  }

  /**
   */
  private vdsReinstallContext(requestParameters: VdsReinstallRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/reinstall`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: VdsReinstallToJSON(requestParameters.vdsReinstall)
    };
  }

  /**
   */
  vdsReinstall = async (id: string, vdsReinstall: VdsReinstall): Promise<void> => {
    await this.vdsReinstallRaw({ id: id, vdsReinstall: vdsReinstall });
  };

  /**
   */
  private async vdsRenameRaw(requestParameters: VdsRenameRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsRenameValidation(requestParameters);
    const context = this.vdsRenameContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsRenameValidation(requestParameters: VdsRenameRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsRename."
      );
    }
    if (requestParameters.vdsRename === null || requestParameters.vdsRename === undefined) {
      throw new runtime.RequiredError(
        "vdsRename",
        "Required parameter requestParameters.vdsRename was null or undefined when calling vdsRename."
      );
    }
  }

  /**
   */
  private vdsRenameContext(requestParameters: VdsRenameRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: VdsRenameToJSON(requestParameters.vdsRename)
    };
  }

  /**
   */
  vdsRename = async (id: string, vdsRename: VdsRename): Promise<void> => {
    await this.vdsRenameRaw({ id: id, vdsRename: vdsRename });
  };

  /**
   */
  private async vdsRestoreRaw(requestParameters: VdsRestoreRequest): Promise<runtime.ApiResponse<void>> {
    this.vdsRestoreValidation(requestParameters);
    const context = this.vdsRestoreContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private vdsRestoreValidation(requestParameters: VdsRestoreRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsRestore."
      );
    }
    if (requestParameters.vdsRestore === null || requestParameters.vdsRestore === undefined) {
      throw new runtime.RequiredError(
        "vdsRestore",
        "Required parameter requestParameters.vdsRestore was null or undefined when calling vdsRestore."
      );
    }
  }

  /**
   */
  private vdsRestoreContext(requestParameters: VdsRestoreRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: VdsRestoreToJSON(requestParameters.vdsRestore)
    };
  }

  /**
   */
  vdsRestore = async (id: string, vdsRestore: VdsRestore): Promise<void> => {
    await this.vdsRestoreRaw({ id: id, vdsRestore: vdsRestore });
  };

  /**
   */
  private async vdsTariffRaw(requestParameters: VdsTariffRequest): Promise<runtime.ApiResponse<VdsTariff>> {
    this.vdsTariffValidation(requestParameters);
    const context = this.vdsTariffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => VdsTariffFromJSON(jsonValue));
  }

  /**
   */
  private vdsTariffValidation(requestParameters: VdsTariffRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsTariff."
      );
    }
  }

  /**
   */
  private vdsTariffContext(requestParameters: VdsTariffRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/vds/tariff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsTariff = async (id: string): Promise<VdsTariff> => {
    const response = await this.vdsTariffRaw({ id: id });
    return await response.value();
  };

  useVdsTariff(id: string, config?: ConfigInterface<VdsTariff, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.vdsTariffContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsTariff(id!) : undefined, config);
  }

  /**
   */
  private async vdsTariffChangeRaw(
    requestParameters: VdsTariffChangeRequest
  ): Promise<runtime.ApiResponse<VdsInvoiceId>> {
    this.vdsTariffChangeValidation(requestParameters);
    const context = this.vdsTariffChangeContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => VdsInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private vdsTariffChangeValidation(requestParameters: VdsTariffChangeRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsTariffChange."
      );
    }
    if (requestParameters.vdsTariffChange === null || requestParameters.vdsTariffChange === undefined) {
      throw new runtime.RequiredError(
        "vdsTariffChange",
        "Required parameter requestParameters.vdsTariffChange was null or undefined when calling vdsTariffChange."
      );
    }
  }

  /**
   */
  private vdsTariffChangeContext(requestParameters: VdsTariffChangeRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/tariff`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: VdsTariffChangeToJSON(requestParameters.vdsTariffChange)
    };
  }

  /**
   */
  vdsTariffChange = async (id: string, vdsTariffChange: VdsTariffChange): Promise<VdsInvoiceId> => {
    const response = await this.vdsTariffChangeRaw({ id: id, vdsTariffChange: vdsTariffChange });
    return await response.value();
  };

  /**
   */
  private async vdsTariffsRaw(): Promise<runtime.ApiResponse<Array<VdsTariff>>> {
    this.vdsTariffsValidation();
    const context = this.vdsTariffsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(VdsTariffFromJSON));
  }

  /**
   */
  private vdsTariffsValidation() {}

  /**
   */
  private vdsTariffsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/vds/tariff`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsTariffs = async (): Promise<Array<VdsTariff>> => {
    const response = await this.vdsTariffsRaw();
    return await response.value();
  };

  useVdsTariffs(config?: ConfigInterface<Array<VdsTariff>, Error>) {
    let valid = true;

    const context = this.vdsTariffsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsTariffs() : undefined, config);
  }

  /**
   */
  private async vdsVncRaw(requestParameters: VdsVncRequest): Promise<runtime.ApiResponse<VncCredentials>> {
    this.vdsVncValidation(requestParameters);
    const context = this.vdsVncContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => VncCredentialsFromJSON(jsonValue));
  }

  /**
   */
  private vdsVncValidation(requestParameters: VdsVncRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vdsVnc."
      );
    }
  }

  /**
   */
  private vdsVncContext(requestParameters: VdsVncRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/vds/instance/{id}/vnc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  vdsVnc = async (id: string): Promise<VncCredentials> => {
    const response = await this.vdsVncRaw({ id: id });
    return await response.value();
  };

  useVdsVnc(id: string, config?: ConfigInterface<VncCredentials, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.vdsVncContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.vdsVnc(id!) : undefined, config);
  }
}

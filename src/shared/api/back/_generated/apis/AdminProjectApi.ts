/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  CreateProject,
  CreateProjectFromJSON,
  CreateProjectToJSON,
  DeleteProject,
  DeleteProjectFromJSON,
  DeleteProjectToJSON,
  Project,
  ProjectFromJSON,
  ProjectToJSON,
  UpdateProject,
  UpdateProjectFromJSON,
  UpdateProjectToJSON
} from "../models";

interface DeleteProjectRequest {
  id: string;
  deleteProject: DeleteProject;
}

interface ProjectCreateRequest {
  createProject: CreateProject;
}

interface ProjectUpdateRequest {
  id: string;
  updateProject: UpdateProject;
}

interface ProjectsRequest {
  userId: string;
}

/**
 *
 */
export class AdminProjectApi extends runtime.BaseAPI {
  /**
   */
  private async deleteProjectRaw(requestParameters: DeleteProjectRequest): Promise<runtime.ApiResponse<void>> {
    this.deleteProjectValidation(requestParameters);
    const context = this.deleteProjectContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private deleteProjectValidation(requestParameters: DeleteProjectRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteProject."
      );
    }
    if (requestParameters.deleteProject === null || requestParameters.deleteProject === undefined) {
      throw new runtime.RequiredError(
        "deleteProject",
        "Required parameter requestParameters.deleteProject was null or undefined when calling deleteProject."
      );
    }
  }

  /**
   */
  private deleteProjectContext(requestParameters: DeleteProjectRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/project/{id}/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DeleteProjectToJSON(requestParameters.deleteProject)
    };
  }

  /**
   */
  deleteProject = async (id: string, deleteProject: DeleteProject): Promise<void> => {
    await this.deleteProjectRaw({ id: id, deleteProject: deleteProject });
  };

  /**
   */
  private async projectCreateRaw(requestParameters: ProjectCreateRequest): Promise<runtime.ApiResponse<Project>> {
    this.projectCreateValidation(requestParameters);
    const context = this.projectCreateContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => ProjectFromJSON(jsonValue));
  }

  /**
   */
  private projectCreateValidation(requestParameters: ProjectCreateRequest) {
    if (requestParameters.createProject === null || requestParameters.createProject === undefined) {
      throw new runtime.RequiredError(
        "createProject",
        "Required parameter requestParameters.createProject was null or undefined when calling projectCreate."
      );
    }
  }

  /**
   */
  private projectCreateContext(requestParameters: ProjectCreateRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/project`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateProjectToJSON(requestParameters.createProject)
    };
  }

  /**
   */
  projectCreate = async (createProject: CreateProject): Promise<Project> => {
    const response = await this.projectCreateRaw({ createProject: createProject });
    return await response.value();
  };

  /**
   */
  private async projectUpdateRaw(requestParameters: ProjectUpdateRequest): Promise<runtime.ApiResponse<Project>> {
    this.projectUpdateValidation(requestParameters);
    const context = this.projectUpdateContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => ProjectFromJSON(jsonValue));
  }

  /**
   */
  private projectUpdateValidation(requestParameters: ProjectUpdateRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling projectUpdate."
      );
    }
    if (requestParameters.updateProject === null || requestParameters.updateProject === undefined) {
      throw new runtime.RequiredError(
        "updateProject",
        "Required parameter requestParameters.updateProject was null or undefined when calling projectUpdate."
      );
    }
  }

  /**
   */
  private projectUpdateContext(requestParameters: ProjectUpdateRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UpdateProjectToJSON(requestParameters.updateProject)
    };
  }

  /**
   */
  projectUpdate = async (id: string, updateProject: UpdateProject): Promise<Project> => {
    const response = await this.projectUpdateRaw({ id: id, updateProject: updateProject });
    return await response.value();
  };

  /**
   */
  private async projectsRaw(requestParameters: ProjectsRequest): Promise<runtime.ApiResponse<Array<Project>>> {
    this.projectsValidation(requestParameters);
    const context = this.projectsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(ProjectFromJSON));
  }

  /**
   */
  private projectsValidation(requestParameters: ProjectsRequest) {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling projects."
      );
    }
  }

  /**
   */
  private projectsContext(requestParameters: ProjectsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/project`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  projects = async (userId: string): Promise<Array<Project>> => {
    const response = await this.projectsRaw({ userId: userId });
    return await response.value();
  };

  useProjects(userId: string, config?: ConfigInterface<Array<Project>, Error>) {
    let valid = true;

    if (userId === null || userId === undefined || Number.isNaN(userId)) {
      valid = false;
    }

    const context = this.projectsContext({ userId: userId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.projects(userId!) : undefined, config);
  }
}

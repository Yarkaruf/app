/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ServerConfig,
  ServerConfigFromJSON,
  ServerConfigFromJSONTyped,
  ServerConfigToJSON,
  ServerInterface,
  ServerInterfaceFromJSON,
  ServerInterfaceFromJSONTyped,
  ServerInterfaceToJSON
} from "./";

/**
 *
 * @export
 * @interface Server
 */
export interface Server {
  /**
   *
   * @type {number}
   * @memberof Server
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Server
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof Server
   */
  primaryIp4?: string;
  /**
   *
   * @type {string}
   * @memberof Server
   */
  primaryIp6?: string;
  /**
   *
   * @type {string}
   * @memberof Server
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Server
   */
  role: string;
  /**
   *
   * @type {string}
   * @memberof Server
   */
  serial: string;
  /**
   *
   * @type {string}
   * @memberof Server
   */
  assetTag: string;
  /**
   *
   * @type {Array<ServerInterface>}
   * @memberof Server
   */
  interfaces: Array<ServerInterface>;
  /**
   *
   * @type {number}
   * @memberof Server
   */
  rackId?: number;
  /**
   *
   * @type {ServerConfig}
   * @memberof Server
   */
  config: ServerConfig;
}

export function ServerFromJSON(json: any): Server {
  return ServerFromJSONTyped(json, false);
}

export function ServerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Server {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    status: json["status"],
    primaryIp4: !exists(json, "primaryIp4") ? undefined : json["primaryIp4"],
    primaryIp6: !exists(json, "primaryIp6") ? undefined : json["primaryIp6"],
    name: json["name"],
    role: json["role"],
    serial: json["serial"],
    assetTag: json["assetTag"],
    interfaces: (json["interfaces"] as Array<any>).map(ServerInterfaceFromJSON),
    rackId: !exists(json, "rackId") ? undefined : json["rackId"],
    config: ServerConfigFromJSON(json["config"])
  };
}

export function ServerToJSON(value?: Server | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id === undefined ? null : value.id,
    status: value.status === undefined ? null : value.status,
    primaryIp4: value.primaryIp4 === undefined ? null : value.primaryIp4,
    primaryIp6: value.primaryIp6 === undefined ? null : value.primaryIp6,
    name: value.name === undefined ? null : value.name,
    role: value.role === undefined ? null : value.role,
    serial: value.serial === undefined ? null : value.serial,
    assetTag: value.assetTag === undefined ? null : value.assetTag,
    interfaces: (value.interfaces as Array<any>).map(ServerInterfaceToJSON),
    rackId: value.rackId === undefined ? null : value.rackId,
    config: ServerConfigToJSON(value.config)
  };
}

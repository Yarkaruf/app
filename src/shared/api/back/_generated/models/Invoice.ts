/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { InvoiceItem, InvoiceItemFromJSON, InvoiceItemFromJSONTyped, InvoiceItemToJSON } from "./";

/**
 *
 * @export
 * @interface Invoice
 */
export interface Invoice {
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  amount: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof Invoice
   */
  number: number;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  paidByAdminId?: string;
  /**
   *
   * @type {Array<InvoiceItem>}
   * @memberof Invoice
   */
  items: Array<InvoiceItem>;
  /**
   *
   * @type {Date}
   * @memberof Invoice
   */
  createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof Invoice
   */
  expiresAt: Date;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  status: InvoiceStatusEnum;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  paymentId?: string;
  /**
   *
   * @type {string}
   * @memberof Invoice
   */
  balanceTransactionId?: string;
}

export function InvoiceFromJSON(json: any): Invoice {
  return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    amount: json["amount"],
    id: json["id"],
    number: json["number"],
    userId: json["userId"],
    paidByAdminId: !exists(json, "paidByAdminId") ? undefined : json["paidByAdminId"],
    items: (json["items"] as Array<any>).map(InvoiceItemFromJSON),
    createdAt: new Date(json["createdAt"]),
    expiresAt: new Date(json["expiresAt"]),
    status: json["status"],
    paymentId: !exists(json, "paymentId") ? undefined : json["paymentId"],
    balanceTransactionId: !exists(json, "balanceTransactionId") ? undefined : json["balanceTransactionId"]
  };
}

export function InvoiceToJSON(value?: Invoice | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    amount: value.amount === undefined ? null : value.amount,
    id: value.id === undefined ? null : value.id,
    number: value.number === undefined ? null : value.number,
    userId: value.userId === undefined ? null : value.userId,
    paidByAdminId: value.paidByAdminId === undefined ? null : value.paidByAdminId,
    items: (value.items as Array<any>).map(InvoiceItemToJSON),
    createdAt: value.createdAt.toISOString(),
    expiresAt: value.expiresAt.toISOString(),
    status: value.status === undefined ? null : value.status,
    paymentId: value.paymentId === undefined ? null : value.paymentId,
    balanceTransactionId: value.balanceTransactionId === undefined ? null : value.balanceTransactionId
  };
}

/**
 * @export
 * @enum {string}
 */
export enum InvoiceStatusEnum {
  DRAFT = "DRAFT",
  OPEN = "OPEN",
  PAID = "PAID",
  VOID = "VOID"
}

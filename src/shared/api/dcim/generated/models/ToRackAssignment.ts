/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  AssetAssignment,
  AssetAssignmentFromJSON,
  AssetAssignmentFromJSONTyped,
  AssetAssignmentToJSON,
  Transfer,
  TransferFromJSON,
  TransferFromJSONTyped,
  TransferToJSON
} from "./";

/**
 *
 * @export
 * @interface ToRackAssignment
 */
export interface ToRackAssignment {
  /**
   *
   * @type {object}
   * @memberof ToRackAssignment
   */
  readonly asset: object;
  /**
   *
   * @type {object}
   * @memberof ToRackAssignment
   */
  readonly slaveAsset: object;
  /**
   *
   * @type {number}
   * @memberof ToRackAssignment
   */
  deviceId: number;
  /**
   *
   * @type {number}
   * @memberof ToRackAssignment
   */
  rackId: number;
  /**
   *
   * @type {number}
   * @memberof ToRackAssignment
   */
  unit: number;
  /**
   *
   * @type {string}
   * @memberof ToRackAssignment
   */
  type: ToRackAssignmentTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ToRackAssignment
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ToRackAssignment
   */
  state: ToRackAssignmentStateEnum;
  /**
   *
   * @type {Transfer}
   * @memberof ToRackAssignment
   */
  transfer: Transfer;
  /**
   *
   * @type {Array<AssetAssignment>}
   * @memberof ToRackAssignment
   */
  assetAssignments: Array<AssetAssignment>;
}

export function ToRackAssignmentFromJSON(json: any): ToRackAssignment {
  return ToRackAssignmentFromJSONTyped(json, false);
}

export function ToRackAssignmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToRackAssignment {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    asset: json["asset"],
    slaveAsset: json["slaveAsset"],
    deviceId: json["deviceId"],
    rackId: json["rackId"],
    unit: json["unit"],
    type: json["type"],
    id: json["id"],
    state: json["_state"],
    transfer: TransferFromJSON(json["transfer"]),
    assetAssignments: (json["assetAssignments"] as Array<any>).map(AssetAssignmentFromJSON)
  };
}

export function ToRackAssignmentToJSON(value?: ToRackAssignment | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    deviceId: value.deviceId === undefined ? null : value.deviceId,
    rackId: value.rackId === undefined ? null : value.rackId,
    unit: value.unit === undefined ? null : value.unit,
    type: value.type === undefined ? null : value.type,
    id: value.id === undefined ? null : value.id,
    _state: value.state === undefined ? null : value.state,
    transfer: TransferToJSON(value.transfer),
    assetAssignments: (value.assetAssignments as Array<any>).map(AssetAssignmentToJSON)
  };
}

/**
 * @export
 * @enum {string}
 */
export enum ToRackAssignmentTypeEnum {
  TOWAREHOUSEASSIGNMENT = "TO_WAREHOUSE_ASSIGNMENT",
  TORACKASSIGNMENT = "TO_RACK_ASSIGNMENT",
  BETWEENASSETSASSIGNMENT = "BETWEEN_ASSETS_ASSIGNMENT"
}
/**
 * @export
 * @enum {string}
 */
export enum ToRackAssignmentStateEnum {
  ACTUAL = "ACTUAL",
  PLANNED = "PLANNED",
  DELETED = "DELETED"
}

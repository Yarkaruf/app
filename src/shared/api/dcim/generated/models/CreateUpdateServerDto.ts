/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ServerTestResultDto,
  ServerTestResultDtoFromJSON,
  ServerTestResultDtoFromJSONTyped,
  ServerTestResultDtoToJSON
} from "./";

/**
 *
 * @export
 * @interface CreateUpdateServerDto
 */
export interface CreateUpdateServerDto {
  /**
   *
   * @type {number}
   * @memberof CreateUpdateServerDto
   */
  role: number;
  /**
   *
   * @type {string}
   * @memberof CreateUpdateServerDto
   */
  status: CreateUpdateServerDtoStatusEnum;
  /**
   *
   * @type {number}
   * @memberof CreateUpdateServerDto
   */
  dataCenterId?: number;
  /**
   *
   * @type {string}
   * @memberof CreateUpdateServerDto
   */
  name: string | undefined;
  /**
   *
   * @type {string}
   * @memberof CreateUpdateServerDto
   */
  serial?: string;
  /**
   *
   * @type {string}
   * @memberof CreateUpdateServerDto
   */
  assetTag: string;
  /**
   *
   * @type {string}
   * @memberof CreateUpdateServerDto
   */
  tariffId: string | undefined;
  /**
   *
   * @type {string}
   * @memberof CreateUpdateServerDto
   */
  userId: string | undefined;
  /**
   *
   * @type {Array<ServerTestResultDto>}
   * @memberof CreateUpdateServerDto
   */
  tests?: Array<ServerTestResultDto>;
}

export function CreateUpdateServerDtoFromJSON(json: any): CreateUpdateServerDto {
  return CreateUpdateServerDtoFromJSONTyped(json, false);
}

export function CreateUpdateServerDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUpdateServerDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    role: json["role"],
    status: json["status"],
    dataCenterId: !exists(json, "dataCenterId") ? undefined : json["dataCenterId"],
    name: json["name"] === null ? undefined : json["name"],
    serial: !exists(json, "serial") ? undefined : json["serial"],
    assetTag: json["assetTag"],
    tariffId: json["tariffId"] === null ? undefined : json["tariffId"],
    userId: json["userId"] === null ? undefined : json["userId"],
    tests: !exists(json, "tests") ? undefined : (json["tests"] as Array<any>).map(ServerTestResultDtoFromJSON)
  };
}

export function CreateUpdateServerDtoToJSON(value?: CreateUpdateServerDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    role: value.role === undefined ? null : value.role,
    status: value.status === undefined ? null : value.status,
    dataCenterId: value.dataCenterId === undefined ? null : value.dataCenterId,
    name: value.name === undefined ? null : value.name,
    serial: value.serial === undefined ? null : value.serial,
    assetTag: value.assetTag === undefined ? null : value.assetTag,
    tariffId: value.tariffId === undefined ? null : value.tariffId,
    userId: value.userId === undefined ? null : value.userId,
    tests: value.tests === undefined ? null : (value.tests as Array<any>).map(ServerTestResultDtoToJSON)
  };
}

/**
 * @export
 * @enum {string}
 */
export enum CreateUpdateServerDtoStatusEnum {
  Planned = "planned",
  Active = "active",
  Offline = "offline",
  Failed = "failed",
  Staged = "staged"
}

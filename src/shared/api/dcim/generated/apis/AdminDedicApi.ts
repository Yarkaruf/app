/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  CreateUpdateTariffDto,
  CreateUpdateTariffDtoFromJSON,
  CreateUpdateTariffDtoToJSON,
  Tariff,
  TariffFromJSON,
  TariffToJSON
} from "../models";

interface CreateOneBaseTariffControllerTariffRequest {
  createUpdateTariffDto: CreateUpdateTariffDto;
}

interface DeleteOneBaseTariffControllerTariffRequest {
  id: string;
}

interface GetManyBaseTariffControllerTariffRequest {
  fields?: Array<string>;
  s?: string;
  filter?: Array<string>;
  or?: Array<string>;
  sort?: Array<string>;
  join?: Array<string>;
  limit?: number;
  offset?: number;
  page?: number;
  cache?: number;
}

interface GetOneBaseTariffControllerTariffRequest {
  id: string;
  fields?: Array<string>;
  join?: Array<string>;
  cache?: number;
}

interface UpdateOneBaseTariffControllerTariffRequest {
  id: string;
  createUpdateTariffDto: CreateUpdateTariffDto;
}

/**
 *
 */
export class AdminDedicApi extends runtime.BaseAPI {
  /**
   * Create a single Tariff
   */
  private async createOneBaseTariffControllerTariffRaw(
    requestParameters: CreateOneBaseTariffControllerTariffRequest
  ): Promise<runtime.ApiResponse<Tariff>> {
    this.createOneBaseTariffControllerTariffValidation(requestParameters);
    const context = this.createOneBaseTariffControllerTariffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TariffFromJSON(jsonValue));
  }

  /**
   * Create a single Tariff
   */
  private createOneBaseTariffControllerTariffValidation(requestParameters: CreateOneBaseTariffControllerTariffRequest) {
    if (requestParameters.createUpdateTariffDto === null || requestParameters.createUpdateTariffDto === undefined) {
      throw new runtime.RequiredError(
        "createUpdateTariffDto",
        "Required parameter requestParameters.createUpdateTariffDto was null or undefined when calling createOneBaseTariffControllerTariff."
      );
    }
  }

  /**
   * Create a single Tariff
   */
  private createOneBaseTariffControllerTariffContext(
    requestParameters: CreateOneBaseTariffControllerTariffRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/dedic/tariff`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: CreateUpdateTariffDtoToJSON(requestParameters.createUpdateTariffDto)
    };
  }

  /**
   * Create a single Tariff
   */
  createOneBaseTariffControllerTariff = async (createUpdateTariffDto: CreateUpdateTariffDto): Promise<Tariff> => {
    const response = await this.createOneBaseTariffControllerTariffRaw({
      createUpdateTariffDto: createUpdateTariffDto
    });
    return await response.value();
  };

  /**
   * Delete a single Tariff
   */
  private async deleteOneBaseTariffControllerTariffRaw(
    requestParameters: DeleteOneBaseTariffControllerTariffRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.deleteOneBaseTariffControllerTariffValidation(requestParameters);
    const context = this.deleteOneBaseTariffControllerTariffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a single Tariff
   */
  private deleteOneBaseTariffControllerTariffValidation(requestParameters: DeleteOneBaseTariffControllerTariffRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteOneBaseTariffControllerTariff."
      );
    }
  }

  /**
   * Delete a single Tariff
   */
  private deleteOneBaseTariffControllerTariffContext(
    requestParameters: DeleteOneBaseTariffControllerTariffRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/dedic/tariff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   * Delete a single Tariff
   */
  deleteOneBaseTariffControllerTariff = async (id: string): Promise<void> => {
    await this.deleteOneBaseTariffControllerTariffRaw({ id: id });
  };

  useDeleteOneBaseTariffControllerTariff(id: string, config?: ConfigInterface<void, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.deleteOneBaseTariffControllerTariffContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(
      JSON.stringify(swrKey),
      valid ? () => this.deleteOneBaseTariffControllerTariff(id!) : undefined,
      config
    );
  }

  /**
   * Retrieve multiple Tariffs
   */
  private async getManyBaseTariffControllerTariffRaw(
    requestParameters: GetManyBaseTariffControllerTariffRequest
  ): Promise<runtime.ApiResponse<Array<object>>> {
    this.getManyBaseTariffControllerTariffValidation(requestParameters);
    const context = this.getManyBaseTariffControllerTariffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Retrieve multiple Tariffs
   */
  private getManyBaseTariffControllerTariffValidation(requestParameters: GetManyBaseTariffControllerTariffRequest) {}

  /**
   * Retrieve multiple Tariffs
   */
  private getManyBaseTariffControllerTariffContext(
    requestParameters: GetManyBaseTariffControllerTariffRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.fields) {
      queryParameters["fields"] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
    }

    if (requestParameters.s !== undefined) {
      queryParameters["s"] = requestParameters.s;
    }

    if (requestParameters.filter) {
      queryParameters["filter"] = requestParameters.filter;
    }

    if (requestParameters.or) {
      queryParameters["or"] = requestParameters.or;
    }

    if (requestParameters.sort) {
      queryParameters["sort"] = requestParameters.sort;
    }

    if (requestParameters.join) {
      queryParameters["join"] = requestParameters.join;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.cache !== undefined) {
      queryParameters["cache"] = requestParameters.cache;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/dedic/tariff`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   * Retrieve multiple Tariffs
   */
  getManyBaseTariffControllerTariff = async (
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number
  ): Promise<Array<object>> => {
    const response = await this.getManyBaseTariffControllerTariffRaw({
      fields: fields,
      s: s,
      filter: filter,
      or: or,
      sort: sort,
      join: join,
      limit: limit,
      offset: offset,
      page: page,
      cache: cache
    });
    return await response.value();
  };

  useGetManyBaseTariffControllerTariff(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    config?: ConfigInterface<Array<object>, Error>
  ) {
    let valid = true;

    const context = this.getManyBaseTariffControllerTariffContext({
      fields: fields!,
      s: s!,
      filter: filter!,
      or: or!,
      sort: sort!,
      join: join!,
      limit: limit!,
      offset: offset!,
      page: page!,
      cache: cache!
    });
    const { headers, ...swrKey } = context;
    return useSWR(
      JSON.stringify(swrKey),
      valid
        ? () =>
            this.getManyBaseTariffControllerTariff(
              fields!,
              s!,
              filter!,
              or!,
              sort!,
              join!,
              limit!,
              offset!,
              page!,
              cache!
            )
        : undefined,
      config
    );
  }

  /**
   * Retrieve a single Tariff
   */
  private async getOneBaseTariffControllerTariffRaw(
    requestParameters: GetOneBaseTariffControllerTariffRequest
  ): Promise<runtime.ApiResponse<object>> {
    this.getOneBaseTariffControllerTariffValidation(requestParameters);
    const context = this.getOneBaseTariffControllerTariffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Retrieve a single Tariff
   */
  private getOneBaseTariffControllerTariffValidation(requestParameters: GetOneBaseTariffControllerTariffRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getOneBaseTariffControllerTariff."
      );
    }
  }

  /**
   * Retrieve a single Tariff
   */
  private getOneBaseTariffControllerTariffContext(
    requestParameters: GetOneBaseTariffControllerTariffRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.fields) {
      queryParameters["fields"] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
    }

    if (requestParameters.join) {
      queryParameters["join"] = requestParameters.join;
    }

    if (requestParameters.cache !== undefined) {
      queryParameters["cache"] = requestParameters.cache;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/dedic/tariff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   * Retrieve a single Tariff
   */
  getOneBaseTariffControllerTariff = async (
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number
  ): Promise<object> => {
    const response = await this.getOneBaseTariffControllerTariffRaw({
      id: id,
      fields: fields,
      join: join,
      cache: cache
    });
    return await response.value();
  };

  useGetOneBaseTariffControllerTariff(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    config?: ConfigInterface<object, Error>
  ) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.getOneBaseTariffControllerTariffContext({
      id: id!,
      fields: fields!,
      join: join!,
      cache: cache!
    });
    const { headers, ...swrKey } = context;
    return useSWR(
      JSON.stringify(swrKey),
      valid ? () => this.getOneBaseTariffControllerTariff(id!, fields!, join!, cache!) : undefined,
      config
    );
  }

  /**
   * Update a single Tariff
   */
  private async updateOneBaseTariffControllerTariffRaw(
    requestParameters: UpdateOneBaseTariffControllerTariffRequest
  ): Promise<runtime.ApiResponse<Tariff>> {
    this.updateOneBaseTariffControllerTariffValidation(requestParameters);
    const context = this.updateOneBaseTariffControllerTariffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => TariffFromJSON(jsonValue));
  }

  /**
   * Update a single Tariff
   */
  private updateOneBaseTariffControllerTariffValidation(requestParameters: UpdateOneBaseTariffControllerTariffRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateOneBaseTariffControllerTariff."
      );
    }
    if (requestParameters.createUpdateTariffDto === null || requestParameters.createUpdateTariffDto === undefined) {
      throw new runtime.RequiredError(
        "createUpdateTariffDto",
        "Required parameter requestParameters.createUpdateTariffDto was null or undefined when calling updateOneBaseTariffControllerTariff."
      );
    }
  }

  /**
   * Update a single Tariff
   */
  private updateOneBaseTariffControllerTariffContext(
    requestParameters: UpdateOneBaseTariffControllerTariffRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/dedic/tariff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "PATCH",
      headers: headerParameters,
      query: queryParameters,
      body: CreateUpdateTariffDtoToJSON(requestParameters.createUpdateTariffDto)
    };
  }

  /**
   * Update a single Tariff
   */
  updateOneBaseTariffControllerTariff = async (
    id: string,
    createUpdateTariffDto: CreateUpdateTariffDto
  ): Promise<Tariff> => {
    const response = await this.updateOneBaseTariffControllerTariffRaw({
      id: id,
      createUpdateTariffDto: createUpdateTariffDto
    });
    return await response.value();
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import {
  CustomerTariffDto,
  CustomerTariffDtoFromJSON,
  CustomerTariffDtoToJSON,
  DedicDataCenter,
  DedicDataCenterFromJSON,
  DedicDataCenterToJSON,
  DedicHistory,
  DedicHistoryFromJSON,
  DedicHistoryToJSON,
  DedicInstance,
  DedicInstanceFromJSON,
  DedicInstanceToJSON,
  DedicInstanceDto,
  DedicInstanceDtoFromJSON,
  DedicInstanceDtoToJSON,
  DedicInvoiceId,
  DedicInvoiceIdFromJSON,
  DedicInvoiceIdToJSON,
  DedicMove,
  DedicMoveFromJSON,
  DedicMoveToJSON,
  DedicOrder,
  DedicOrderFromJSON,
  DedicOrderToJSON,
  DedicReinstall,
  DedicReinstallFromJSON,
  DedicReinstallToJSON,
  DedicRename,
  DedicRenameFromJSON,
  DedicRenameToJSON,
  OperatingSystem,
  OperatingSystemFromJSON,
  OperatingSystemToJSON
} from "../models";

interface CreateDedicOrderRequest {
  dedicInstanceDto: DedicInstanceDto;
}

interface DedicRequest {
  id: string;
}

interface DedicDeleteRequest {
  id: string;
}

interface DedicHistoryRequest {
  id: string;
}

interface DedicListRequest {
  dataCenterId?: string;
  projectId?: string;
}

interface DedicMoveRequest {
  id: string;
  dedicMove: DedicMove;
}

interface DedicOffRequest {
  id: string;
}

interface DedicOnRequest {
  id: string;
}

interface DedicRebootRequest {
  id: string;
}

interface DedicReinstallRequest {
  id: string;
  dedicReinstall: DedicReinstall;
}

interface DedicRenameRequest {
  id: string;
  dedicRename: DedicRename;
}

interface TariffRequest {
  id: string;
}

interface TariffsRequest {
  dataCenterId?: string;
}

/**
 *
 */
export class DedicApi extends runtime.BaseAPI {
  /**
   */
  private async createDedicOrderRaw(
    requestParameters: CreateDedicOrderRequest
  ): Promise<runtime.ApiResponse<Array<DedicOrder>>> {
    this.createDedicOrderValidation(requestParameters);
    const context = this.createDedicOrderContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(DedicOrderFromJSON));
  }

  /**
   */
  private createDedicOrderValidation(requestParameters: CreateDedicOrderRequest) {
    if (requestParameters.dedicInstanceDto === null || requestParameters.dedicInstanceDto === undefined) {
      throw new runtime.RequiredError(
        "dedicInstanceDto",
        "Required parameter requestParameters.dedicInstanceDto was null or undefined when calling createDedicOrder."
      );
    }
  }

  /**
   */
  private createDedicOrderContext(requestParameters: CreateDedicOrderRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DedicInstanceDtoToJSON(requestParameters.dedicInstanceDto)
    };
  }

  /**
   */
  createDedicOrder = async (dedicInstanceDto: DedicInstanceDto): Promise<Array<DedicOrder>> => {
    const response = await this.createDedicOrderRaw({ dedicInstanceDto: dedicInstanceDto });
    return await response.value();
  };

  /**
   */
  private async dataCentersRaw(): Promise<runtime.ApiResponse<Array<DedicDataCenter>>> {
    this.dataCentersValidation();
    const context = this.dataCentersContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(DedicDataCenterFromJSON));
  }

  /**
   */
  private dataCentersValidation() {}

  /**
   */
  private dataCentersContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/dedic/common/data-centers`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dataCenters = async (): Promise<Array<DedicDataCenter>> => {
    const response = await this.dataCentersRaw();
    return await response.value();
  };

  useDataCenters(config?: ConfigInterface<Array<DedicDataCenter>, Error>) {
    let valid = true;

    const context = this.dataCentersContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.dataCenters() : undefined, config);
  }

  /**
   */
  private async dedicRaw(requestParameters: DedicRequest): Promise<runtime.ApiResponse<DedicInstance>> {
    this.dedicValidation(requestParameters);
    const context = this.dedicContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => DedicInstanceFromJSON(jsonValue));
  }

  /**
   */
  private dedicValidation(requestParameters: DedicRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedic."
      );
    }
  }

  /**
   */
  private dedicContext(requestParameters: DedicRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dedic = async (id: string): Promise<DedicInstance> => {
    const response = await this.dedicRaw({ id: id });
    return await response.value();
  };

  useDedic(id: string, config?: ConfigInterface<DedicInstance, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.dedicContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.dedic(id!) : undefined, config);
  }

  /**
   */
  private async dedicDeleteRaw(requestParameters: DedicDeleteRequest): Promise<runtime.ApiResponse<DedicInvoiceId>> {
    this.dedicDeleteValidation(requestParameters);
    const context = this.dedicDeleteContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => DedicInvoiceIdFromJSON(jsonValue));
  }

  /**
   */
  private dedicDeleteValidation(requestParameters: DedicDeleteRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicDelete."
      );
    }
  }

  /**
   */
  private dedicDeleteContext(requestParameters: DedicDeleteRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dedicDelete = async (id: string): Promise<DedicInvoiceId> => {
    const response = await this.dedicDeleteRaw({ id: id });
    return await response.value();
  };

  useDedicDelete(id: string, config?: ConfigInterface<DedicInvoiceId, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.dedicDeleteContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.dedicDelete(id!) : undefined, config);
  }

  /**
   */
  private async dedicHistoryRaw(
    requestParameters: DedicHistoryRequest
  ): Promise<runtime.ApiResponse<Array<DedicHistory>>> {
    this.dedicHistoryValidation(requestParameters);
    const context = this.dedicHistoryContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(DedicHistoryFromJSON));
  }

  /**
   */
  private dedicHistoryValidation(requestParameters: DedicHistoryRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicHistory."
      );
    }
  }

  /**
   */
  private dedicHistoryContext(requestParameters: DedicHistoryRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}/history`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dedicHistory = async (id: string): Promise<Array<DedicHistory>> => {
    const response = await this.dedicHistoryRaw({ id: id });
    return await response.value();
  };

  useDedicHistory(id: string, config?: ConfigInterface<Array<DedicHistory>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.dedicHistoryContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.dedicHistory(id!) : undefined, config);
  }

  /**
   */
  private async dedicListRaw(requestParameters: DedicListRequest): Promise<runtime.ApiResponse<Array<DedicInstance>>> {
    this.dedicListValidation(requestParameters);
    const context = this.dedicListContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(DedicInstanceFromJSON));
  }

  /**
   */
  private dedicListValidation(requestParameters: DedicListRequest) {}

  /**
   */
  private dedicListContext(requestParameters: DedicListRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.dataCenterId !== undefined) {
      queryParameters["dataCenterId"] = requestParameters.dataCenterId;
    }

    if (requestParameters.projectId !== undefined) {
      queryParameters["projectId"] = requestParameters.projectId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dedicList = async (dataCenterId?: string, projectId?: string): Promise<Array<DedicInstance>> => {
    const response = await this.dedicListRaw({ dataCenterId: dataCenterId, projectId: projectId });
    return await response.value();
  };

  useDedicList(dataCenterId?: string, projectId?: string, config?: ConfigInterface<Array<DedicInstance>, Error>) {
    let valid = true;

    const context = this.dedicListContext({ dataCenterId: dataCenterId!, projectId: projectId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.dedicList(dataCenterId!, projectId!) : undefined, config);
  }

  /**
   */
  private async dedicMoveRaw(requestParameters: DedicMoveRequest): Promise<runtime.ApiResponse<void>> {
    this.dedicMoveValidation(requestParameters);
    const context = this.dedicMoveContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private dedicMoveValidation(requestParameters: DedicMoveRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicMove."
      );
    }
    if (requestParameters.dedicMove === null || requestParameters.dedicMove === undefined) {
      throw new runtime.RequiredError(
        "dedicMove",
        "Required parameter requestParameters.dedicMove was null or undefined when calling dedicMove."
      );
    }
  }

  /**
   */
  private dedicMoveContext(requestParameters: DedicMoveRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}/project`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DedicMoveToJSON(requestParameters.dedicMove)
    };
  }

  /**
   */
  dedicMove = async (id: string, dedicMove: DedicMove): Promise<void> => {
    await this.dedicMoveRaw({ id: id, dedicMove: dedicMove });
  };

  /**
   */
  private async dedicOffRaw(requestParameters: DedicOffRequest): Promise<runtime.ApiResponse<void>> {
    this.dedicOffValidation(requestParameters);
    const context = this.dedicOffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private dedicOffValidation(requestParameters: DedicOffRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicOff."
      );
    }
  }

  /**
   */
  private dedicOffContext(requestParameters: DedicOffRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}/power/off`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dedicOff = async (id: string): Promise<void> => {
    await this.dedicOffRaw({ id: id });
  };

  /**
   */
  private async dedicOnRaw(requestParameters: DedicOnRequest): Promise<runtime.ApiResponse<void>> {
    this.dedicOnValidation(requestParameters);
    const context = this.dedicOnContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private dedicOnValidation(requestParameters: DedicOnRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicOn."
      );
    }
  }

  /**
   */
  private dedicOnContext(requestParameters: DedicOnRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}/power/on`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dedicOn = async (id: string): Promise<void> => {
    await this.dedicOnRaw({ id: id });
  };

  /**
   */
  private async dedicRebootRaw(requestParameters: DedicRebootRequest): Promise<runtime.ApiResponse<void>> {
    this.dedicRebootValidation(requestParameters);
    const context = this.dedicRebootContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private dedicRebootValidation(requestParameters: DedicRebootRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicReboot."
      );
    }
  }

  /**
   */
  private dedicRebootContext(requestParameters: DedicRebootRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}/reboot`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  dedicReboot = async (id: string): Promise<void> => {
    await this.dedicRebootRaw({ id: id });
  };

  /**
   */
  private async dedicReinstallRaw(requestParameters: DedicReinstallRequest): Promise<runtime.ApiResponse<void>> {
    this.dedicReinstallValidation(requestParameters);
    const context = this.dedicReinstallContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private dedicReinstallValidation(requestParameters: DedicReinstallRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicReinstall."
      );
    }
    if (requestParameters.dedicReinstall === null || requestParameters.dedicReinstall === undefined) {
      throw new runtime.RequiredError(
        "dedicReinstall",
        "Required parameter requestParameters.dedicReinstall was null or undefined when calling dedicReinstall."
      );
    }
  }

  /**
   */
  private dedicReinstallContext(requestParameters: DedicReinstallRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}/reinstall`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DedicReinstallToJSON(requestParameters.dedicReinstall)
    };
  }

  /**
   */
  dedicReinstall = async (id: string, dedicReinstall: DedicReinstall): Promise<void> => {
    await this.dedicReinstallRaw({ id: id, dedicReinstall: dedicReinstall });
  };

  /**
   */
  private async dedicRenameRaw(requestParameters: DedicRenameRequest): Promise<runtime.ApiResponse<void>> {
    this.dedicRenameValidation(requestParameters);
    const context = this.dedicRenameContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private dedicRenameValidation(requestParameters: DedicRenameRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling dedicRename."
      );
    }
    if (requestParameters.dedicRename === null || requestParameters.dedicRename === undefined) {
      throw new runtime.RequiredError(
        "dedicRename",
        "Required parameter requestParameters.dedicRename was null or undefined when calling dedicRename."
      );
    }
  }

  /**
   */
  private dedicRenameContext(requestParameters: DedicRenameRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/dedic/instance/{id}/name`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: DedicRenameToJSON(requestParameters.dedicRename)
    };
  }

  /**
   */
  dedicRename = async (id: string, dedicRename: DedicRename): Promise<void> => {
    await this.dedicRenameRaw({ id: id, dedicRename: dedicRename });
  };

  /**
   */
  private async operatingSystemsRaw(): Promise<runtime.ApiResponse<Array<OperatingSystem>>> {
    this.operatingSystemsValidation();
    const context = this.operatingSystemsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(OperatingSystemFromJSON));
  }

  /**
   */
  private operatingSystemsValidation() {}

  /**
   */
  private operatingSystemsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/dedic/common/os`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  operatingSystems = async (): Promise<Array<OperatingSystem>> => {
    const response = await this.operatingSystemsRaw();
    return await response.value();
  };

  useOperatingSystems(config?: ConfigInterface<Array<OperatingSystem>, Error>) {
    let valid = true;

    const context = this.operatingSystemsContext();
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.operatingSystems() : undefined, config);
  }

  /**
   */
  private async tariffRaw(requestParameters: TariffRequest): Promise<runtime.ApiResponse<CustomerTariffDto>> {
    this.tariffValidation(requestParameters);
    const context = this.tariffContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => CustomerTariffDtoFromJSON(jsonValue));
  }

  /**
   */
  private tariffValidation(requestParameters: TariffRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling tariff."
      );
    }
  }

  /**
   */
  private tariffContext(requestParameters: TariffRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/dedic/common/tariffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tariff = async (id: string): Promise<CustomerTariffDto> => {
    const response = await this.tariffRaw({ id: id });
    return await response.value();
  };

  useTariff(id: string, config?: ConfigInterface<CustomerTariffDto, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.tariffContext({ id: id! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.tariff(id!) : undefined, config);
  }

  /**
   */
  private async tariffsRaw(requestParameters: TariffsRequest): Promise<runtime.ApiResponse<Array<CustomerTariffDto>>> {
    this.tariffsValidation(requestParameters);
    const context = this.tariffsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(CustomerTariffDtoFromJSON));
  }

  /**
   */
  private tariffsValidation(requestParameters: TariffsRequest) {}

  /**
   */
  private tariffsContext(requestParameters: TariffsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.dataCenterId !== undefined) {
      queryParameters["dataCenterId"] = requestParameters.dataCenterId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/dedic/common/tariffs`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   */
  tariffs = async (dataCenterId?: string): Promise<Array<CustomerTariffDto>> => {
    const response = await this.tariffsRaw({ dataCenterId: dataCenterId });
    return await response.value();
  };

  useTariffs(dataCenterId?: string, config?: ConfigInterface<Array<CustomerTariffDto>, Error>) {
    let valid = true;

    const context = this.tariffsContext({ dataCenterId: dataCenterId! });
    const { headers, ...swrKey } = context;
    return useSWR(JSON.stringify(swrKey), valid ? () => this.tariffs(dataCenterId!) : undefined, config);
  }
}

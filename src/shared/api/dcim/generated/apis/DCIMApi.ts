/* tslint:disable */
/* eslint-disable */
/**
 * Medialand API
 * Medialand API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { ConfigInterface } from "swr";

import { Processor, ProcessorFromJSON, ProcessorToJSON } from "../models";

interface GetOneBaseUserProcessorControllerProcessorRequest {
  id: string;
  fields?: Array<string>;
  join?: Array<string>;
  cache?: number;
}

/**
 *
 */
export class DCIMApi extends runtime.BaseAPI {
  /**
   * Retrieve a single Processor
   */
  private async getOneBaseUserProcessorControllerProcessorRaw(
    requestParameters: GetOneBaseUserProcessorControllerProcessorRequest
  ): Promise<runtime.ApiResponse<Processor>> {
    this.getOneBaseUserProcessorControllerProcessorValidation(requestParameters);
    const context = this.getOneBaseUserProcessorControllerProcessorContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, jsonValue => ProcessorFromJSON(jsonValue));
  }

  /**
   * Retrieve a single Processor
   */
  private getOneBaseUserProcessorControllerProcessorValidation(
    requestParameters: GetOneBaseUserProcessorControllerProcessorRequest
  ) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getOneBaseUserProcessorControllerProcessor."
      );
    }
  }

  /**
   * Retrieve a single Processor
   */
  private getOneBaseUserProcessorControllerProcessorContext(
    requestParameters: GetOneBaseUserProcessorControllerProcessorRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.fields) {
      queryParameters["fields"] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
    }

    if (requestParameters.join) {
      queryParameters["join"] = requestParameters.join;
    }

    if (requestParameters.cache !== undefined) {
      queryParameters["cache"] = requestParameters.cache;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/dcim/processor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    };
  }

  /**
   * Retrieve a single Processor
   */
  getOneBaseUserProcessorControllerProcessor = async (
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number
  ): Promise<Processor> => {
    const response = await this.getOneBaseUserProcessorControllerProcessorRaw({
      id: id,
      fields: fields,
      join: join,
      cache: cache
    });
    return await response.value();
  };

  useGetOneBaseUserProcessorControllerProcessor(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    config?: ConfigInterface<Processor, Error>
  ) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.getOneBaseUserProcessorControllerProcessorContext({
      id: id!,
      fields: fields!,
      join: join!,
      cache: cache!
    });
    const { headers, ...swrKey } = context;
    return useSWR(
      JSON.stringify(swrKey),
      valid ? () => this.getOneBaseUserProcessorControllerProcessor(id!, fields!, join!, cache!) : undefined,
      config
    );
  }
}
